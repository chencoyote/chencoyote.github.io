<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Coyote's Blog</title><link href="/" rel="alternate"></link><link href="/feeds/all.atom.xml" rel="self"></link><id>/</id><updated>2015-05-11T10:09:11+08:00</updated><entry><title>Gitlab 本地部署笔记</title><link href="/articles/gitlab-ben-di-bu-shu-bi-ji.html" rel="alternate"></link><updated>2015-05-11T10:09:11+08:00</updated><author><name>coyote</name></author><id>tag:,2015-05-11:articles/gitlab-ben-di-bu-shu-bi-ji.html</id><summary type="html">&lt;h2&gt;下载地址&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# 地址被墙, 不过有种解决方法就是去改https为http可以下载, 但是速度很慢
https://downloads-packages.s3.amazonaws.com/centos-6.6/gitlab-ce-7.10.0~omnibus.2-1.x86_64.rpm
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;安装环境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;CentOS 6.5&lt;/li&gt;
&lt;li&gt;虚拟机&lt;/li&gt;
&lt;li&gt;需要外网&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;方法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;源码编译安装&lt;/li&gt;
&lt;li&gt;rpm安装&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;源码编译安装&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;好处: 就是可以根据自己需要来定制一些实用的软件呢, 如数据库/Nginx之类的&lt;/li&gt;
&lt;li&gt;坏处: 就是安装过程太复杂, 调试起来非常复杂&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;rpm安装&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;好处: 啥都内置了, 4部就可以部署完成 (实测没有几个可以4部就能完美运行的)&lt;/li&gt;
&lt;li&gt;坏处: 定制性差, 数据库等都只能靠配置, 而且如果修改为别的配置修改起来非常麻烦, 而且还有可能不成功&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;过程&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;本人用的rpm安装的方式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;官方文档和别人的教程都写的非常详细, 没必要拿来从新写, 过程都是一样的&lt;/p&gt;
&lt;p&gt;&lt;a href="https://about.gitlab.com/downloads/"&gt;官方文档 | gitlab.com&lt;/a&gt;
&lt;a href="http://segmentfault.com/a/1190000002722631"&gt;Hiufan | segmentfault.com&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;遇到的问题&lt;/h2&gt;
&lt;p&gt;这个才是重要的, 每个人遇到的问题几乎都不同, 所以查找问题原因很麻烦
不如把遇到的问题贴出来, 可以之后参考&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;gitlab-rake&lt;/code&gt;: 这个玩意在我了解, 可能是用来初始数据库的, 我用到的如下&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gitlab-rake gitlab:setup&lt;/code&gt; 第一次没跑起来, 查看官方文档, 看到数据库要初始化, 尝试之后可以正常使用了&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;gitlab-rake clear&lt;/code&gt; 故名意思, 直接清干净数据库信息, 但是服务器上的repo是不会一起清除的, 需要手动清除&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;页面显示500错误: 查看日志, 使用先使用&lt;code&gt;gitlab-ctl status&lt;/code&gt;查看状态, 如果进程出现问题是会一直重启的,所以可以使用 &lt;code&gt;gitlab-ctl tail 进程名&lt;/code&gt; 来查看单个进程的日志, 如果tail后面没有进程名, 则显示全部进程的名称&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;nginx配置: nginx配置起来非常麻烦, 所以索性我就关掉了, 找到对应的配置文件修改一下就可以了&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;gitlab-ctl reconfigure&lt;/code&gt;: 每次修改了 &lt;code&gt;/etc/gitlab/gitlab.rb&lt;/code&gt; 这个配置文件之后都需要执行这个命令才可以生效, 他会自动重启服务的. 但是同样有个问题, 就是如果修改过nginx或者其他的内置的程序的配置文件, 执行这个就会被还原, 很麻烦.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;500错误 postgresql SSL off 错误&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;==&amp;gt; /var/log/gitlab/postgresql/current &amp;lt;==
2015-05-08_12:04:03.93789 FATAL:  no pg_hba.conf entry for host &amp;quot;127.0.0.1&amp;quot;, user &amp;quot;gitlab&amp;quot;, database &amp;quot;gitlabhq_production&amp;quot;, SSL off
2015-05-08_12:04:03.94352 FATAL:  no pg_hba.conf entry for host &amp;quot;127.0.0.1&amp;quot;, user &amp;quot;gitlab&amp;quot;, database &amp;quot;gitlabhq_production&amp;quot;, SSL off
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;找到该配置文件&lt;code&gt;/var/opt/gitlab/postgresql/data/pg_hba.conf&lt;/code&gt; 最下面一行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# TYPE  DATABASE    USER        CIDR-ADDRESS          METHOD

# &amp;quot;local&amp;quot; is for Unix domain socket connections only
local   all         all                               peer map=gitlab
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;修改最后一行为&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;host   all         all          0.0.0.0/0            trust
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;问题解决, 但是具体为啥, 请查看postgresql文档&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意: 每次reconfigure之后, 该文件被还原, 需要重新修改&lt;/strong&gt;&lt;/p&gt;</summary><category term="git"></category></entry><entry><title>Application performance management（APM）</title><link href="/articles/application-performance-managementapm.html" rel="alternate"></link><updated>2015-04-13T15:14:14+08:00</updated><author><name>coyote</name></author><id>tag:,2015-04-13:articles/application-performance-managementapm.html</id><summary type="html">&lt;p&gt;翻译自维基百科 —————— 版权属左&lt;/p&gt;
&lt;h2&gt;Application performance management（APM）&lt;/h2&gt;
&lt;p&gt;在信息技术和系统管理领域中，应用性能管理（APM）用来管理和监控应用程序的性能和可用性。APM的目标是探测和诊断应用程序的性能问题，使其保持在一个稳定的水平的服务。APM是“将IT指标翻译为业务含义”的系统&lt;/p&gt;
&lt;h2&gt;目录&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;1 测量应用程序性能
2 存在的问题
3 APM的概念框架
    3.1 终端用户体验监控 End User Experience – (Primary)
    3.2 运行时应用结构 Runtime Application Architecture (Secondary)
    3.3 业务处理 Business Transaction (Primary)
    3.4 应用组件深度挖掘 Deep Dive Component Monitoring (Secondary)
    3.5 分析/报告 Analytics/Reporting (Primary)
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;测量应用程序性能&lt;/h2&gt;
&lt;p&gt;有两套性能指标紧密的监控。第一套性能指标定义最终用户应用的性能体验。例如：最大负荷下的平均响应时间，那么设置的组件就应该包括响应时间和负载。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;负载就是应用处理的事务，例如：每秒的事务数（tps），每秒的请求数，页面请求。除了基本的计算机需求的搜索、计算、传输等，大多数应用程序是够快的，这就是为什么开发人员找不到开发过程中性能问题。&lt;/li&gt;
&lt;li&gt;相应时间是应用程序在一定负载程度上响应用户所需要的时间&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第二套性能指标就是测量应用程序使用的计算资源负载。指示是否有足够的容量来支持负载，以及定位可能的性能瓶颈。这些测量值能够支撑为应用程序建立合理的基线。这些基线可以用来探测性能的变化。从这些变化中可以找到外部事件和将要发生的性能变化之间的联系。&lt;/p&gt;
&lt;p&gt;APM通常用更详细的监测技术用来做web的性能监控。除了用户相应时间和web应用组件的响应时间，还能够检测出延迟的原因。还包括一些基于HTTP的web服务层的一些特别功能的响应时间。&lt;/p&gt;
&lt;p&gt;在APM概念框架中， Gartner描述了五个维度&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;终端用户体验监控 （主动和被动）&lt;/li&gt;
&lt;li&gt;应用拓扑的发现和可视化&lt;/li&gt;
&lt;li&gt;用户自定义的事务分析&lt;/li&gt;
&lt;li&gt;应用组件深度挖掘&lt;/li&gt;
&lt;li&gt;IT运营分析&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(PS: infoq 中Gartner团队的Jonah Kowall对这五个维度进行了解释&lt;/p&gt;
&lt;p&gt;Jonah：Gartner使用一个五维模型来定义APM，因为购买者的需求不同，可能用不着所有的维度。（对他们而言）解决方案满足这些维度的子集要比满足全部的维度更好。而在APM魔力象限中所列的产品，必须满足全部五个维度。具体维度如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最终用户体验监控（EUM）—— 获取以下方面的数据：展示在最终用户面前的应用端到端可用性、延迟、执行正确性以及质量。&lt;/li&gt;
&lt;li&gt;应用拓扑的发现和可视化—— 发现应用执行过程中涉及的软硬件基础架构组件，以及它们之间可能的交互路径矩阵，上述内容实现了应用的交付。&lt;/li&gt;
&lt;li&gt;用户自定义的事务分析 —— 跟踪组成事务的用户分组事件，它们发生在应用内部，并与第二个维度中发现的组件交互；（事务）是为了响应用户对应用的请求而生成的。&lt;/li&gt;
&lt;li&gt;应用组件深度挖掘 —— 对第二个维度中所发现的组件（运行时应用架构发现）消耗的资源和其中发生的事件进行细粒度监控。这可能包括服务器端组件和客户端设备及接口。&lt;/li&gt;
&lt;li&gt;IT运营分析 —— 结合或使用不同技术，在APM的前个四维度生成的典型大数据集里，发现有价值的、可行的模式，这些技术包括复杂的运营事件处理、统计模型发现和识别、非结构化文本索引、搜索和推断、拓扑分析，以及多维数据库搜索和分析。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;存在的问题&lt;/h2&gt;
&lt;p&gt;从2013年上半年, APM已经进入了一个供应商在技术和战略上有各种各样的观点的时期. 这导致了一些变化,不相关的厂商(包括: 网络监控, 系统管理, 应用监测, 和web性能监控)也开始广泛关注APM. 因此, APM的概念开始被淡化, 逐渐演变成为一个在不同平台下应用性能管理的概念, 而不是一个单一的市场.&lt;/p&gt;
&lt;p&gt;APM面临着两大挑战&lt;/p&gt;
&lt;p&gt;1 APM很难成为一个监控应用的工具, 尤其是在应用组件的方面.
2 虚拟化的应用测量标准经常会发生变化. &lt;/p&gt;
&lt;p&gt;为了缓解第一个问题, 出现了应用服务管理(Application Service Management, ASM), 它提供了一种以应用为中心的方案, 这种方案主要以业务服务的性能可视化为关键点.
第二个方面的问题提出了分布式, 虚拟化和基础云应用造成由于大多数的关键系统不再是部署在单独的设备上, 这也给APM造成了独一无二的挑战. 每个功能在看在看来更像是在互联网服务和多个虚拟系统时间设计的. 应用程序本身则更像是从一个系统向另一个服务级对象和处理短暂中断.&lt;/p&gt;
&lt;h2&gt;APM概念框架&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;翻译的非常渣....但是我尽力了....&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;应用程序本身由于向高度虚拟化, 多层次, 多结构的方向发展这些多依赖于应用的开发框架, 比如.NET 或者JAVA 使其在管理上变得越来越困难. APM概念框架被设计用来帮助优先处理那些需要快速实现并且整体认识五维度APM模型. 框架比起其他维度更偏向于其中的3个维度来描述其潜在的好处. 这些维度被称之为_"主要"&lt;em&gt;, 其他的次之的维度被称为&lt;/em&gt;"次要"_.&lt;/p&gt;
&lt;h3&gt;最终用户体验 (主要)&lt;/h3&gt;
&lt;p&gt;测量用户请求传输数据的过程和返回的过程这部分就叫做捕捉最终用户体验(EUE). 分的测量值主要参考实时的应用程序监控值(即自顶向下监控), 它主要分为两部分, 主动和被动.&lt;strong&gt;被动监控&lt;/strong&gt;通常用在无客户端类应用通过网络镜像端口部署. 考虑这种解决方法的一个主要的特点就是能够支持多协议分析(如: XML, SQL, PHP), 因为大多数公司已经不仅仅只支持基于web应用程序. &lt;strong&gt;主动监控&lt;/strong&gt;则从另一个方面入手, 由合成探针以及web自动化预定义系统可用性分析和业务处理. 主动监控和被动监控可以很好的进行互补; 同时使用这两部分可以在应用使用峰值或者传输效率低时提高可用性.&lt;/p&gt;
&lt;p&gt;用户体验管理(UEM) 是 EUE(终端用户体验)维度的一个子类, 它一般用来监控用户的一系列行为环境. UEM如今已经非常成熟, 已经超越了捕获延迟和人为造成的应用和其他服务的冲突. UEM通常基于代理模式, 更有可能包括JaveScripte注入去监控那些终端设备. UEM已经考虑从其他方面进行实时的应用监控.&lt;/p&gt;
&lt;h3&gt;运行时应用程序结构 (次要)&lt;/h3&gt;
&lt;p&gt;应用程序发现和依赖关系映射解决方案已经能够自动化进行映射到底层应用基础组件的处理. 当准备实施一个实时的应用框架, 就必须要确定是在所有节点之上/之下监控以及服务器的环境变量(即, 自底向上监控方式). 这有助于为做事件关联, 并且在了解网络拓扑和应用程序交互框架提供了通用的基础理论支撑.&lt;/p&gt;
&lt;h3&gt;业务处理 (主要)&lt;/h3&gt;
&lt;p&gt;主要关注用户自定义的事务分析, 或者URL指向的页面, 这些其实就是业务. 例如: 如果一个应用有200到300的独立页面, 给他们分为8到12个高级类. 这就意味着遵从SLA报告, 并且从业务层面提供了应用程序性能趋势: 从大的分类开始及时的完善他们. 这可以深入理解事务处理的管理方式.&lt;/p&gt;
&lt;h3&gt;应用组件深度挖掘(次要)&lt;/h3&gt;
&lt;p&gt;应用组件深度挖掘(DDCM) 需要安装客户端, 通常的指向是web, 应用程序, 消息服务器的中间件. 这样可以提供一个关于J2EE和.NET堆栈的实时视图, 并且尝试回溯到用户自定义的事务处理. 一个完善的解决方案可以清晰的看出代码执行的流程(例如, Spring, Struts 等)和对用户请求的url渲染.
由于DDCM和APM模型的第二维度有些关系, 大多数产品在这方面则提供了一个较为广泛的定义: 应用发现依赖映射(application discovery dependency mapping  ADDM).&lt;/p&gt;
&lt;h3&gt;分析/报告 (主要)&lt;/h3&gt;
&lt;p&gt;这对每个应用程序的通用测量值的收集和报告来说非常重要, 通过这些来从通用的角度来提出应用性能数据的标准. 从不同的工具集收集来的数据, 通过APM模型提供一种适用性的应用程序报告. 这种方法可以解释各种性能的问题发生, 尽管在不同平台上的不同应用程序中. 太多的信息难以处理. 这就是为什么简单的报告但是没有人用了.&lt;/p&gt;</summary><category term="apm"></category></entry><entry><title>leetcode刷算法开坑</title><link href="/articles/leetcodeshua-suan-fa-kai-keng.html" rel="alternate"></link><updated>2015-03-24T15:34:36+08:00</updated><author><name>coyote</name></author><id>tag:,2015-03-24:articles/leetcodeshua-suan-fa-kai-keng.html</id><summary type="html">&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://leetcode.com/problemset/algorithms/"&gt;LeetCode OJ&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/chencoyote/pyleetcode"&gt;我的git库&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;背景&lt;/h2&gt;
&lt;p&gt;由于最近被鄙视竟然不会算法就敢写代码, 算法-数据结构-面向对象全都不懂, 你敢说你是程序员?&lt;/p&gt;
&lt;p&gt;被打倒终究要爬起来!&lt;/p&gt;
&lt;p&gt;通过学习,  来刷LeetCode的算法&lt;/p&gt;
&lt;h2&gt;正文&lt;/h2&gt;
&lt;p&gt;PS: 我是倒序做的.... 内容有参考网络, 但是自己是经过思考的&lt;/p&gt;
&lt;h3&gt;No. 191 Number of 1 Bits&lt;/h3&gt;
&lt;p&gt;数出&lt;code&gt;1 bits&lt;/code&gt; 有多少个&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Write a function that takes an unsigned integer and returns the number of ’1' bits it has (also known as the &lt;a href="http://en.wikipedia.org/wiki/Hamming_weight"&gt;Hamming weight&lt;/a&gt;).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For example, the 32-bit integer ’11' has binary representation 00000000000000000000000000001011, so the function should return 3.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数出一个2进制数中的1的个数, 也叫&lt;code&gt;汉明权重&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;例如:&lt;/li&gt;
&lt;li&gt;32位的2进制整数&lt;code&gt;11&lt;/code&gt; 的二进制表示为&lt;code&gt;00000000000000000000000000001011&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;应当返回值为3&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;读懂题之后, 看原文中给的维基百科连接, 仔细读了一下, 给出了很多种解法, &lt;/p&gt;
&lt;p&gt;先说我的解法:
简单粗暴, 用&lt;code&gt;% 2&lt;/code&gt;的做法来验证每一位是不是1&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hammingWeight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;                                                           
     &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;                                                                       
     &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;                                                           
         &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;                                                          
            &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;                                                               
         &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;n: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;                                                          
         &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;/=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;                                                                  
         &lt;span class="c"&gt;# n = n &amp;gt;&amp;gt; 1                                                            &lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;                                                                    
 &lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x10111011011&lt;/span&gt; &lt;span class="c"&gt;# count 8 1-bits&lt;/span&gt;
 &lt;span class="n"&gt;hammingWeight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中&lt;code&gt;n /= 2&lt;/code&gt; 和 &lt;code&gt;n = n &amp;gt;&amp;gt; 1&lt;/code&gt;的效果是一样的
用时&lt;code&gt;45 ms&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;再来看看wiki中的版本&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;其做法是采用这样的思想，类似归并的做法。对于相邻的两位，先计算这两位的1的个数(最大是2)，比如对于32位的数来说，分成 16组，&lt;strong&gt;每组计算的是相邻两位的1的个数和&lt;/strong&gt;，并且将这个和用新得到的数的两位表示(2位可以最大表示4，所以可以存得下这个和，和此时最大为2)；然后对相邻四位进行操作，计算每两位两位的和（这样操作后其实是计算了原来32位数的相邻四位的1的个数）；这样依次类推，对于32位的数来说，只要操作到将其相邻16位的1的个数相加就可以得到其包含的1的个数了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我的理解就是说, 
1. 先分成16组, 那么在与操作&lt;code&gt;0x3333333333333333&lt;/code&gt;的时候, 就相当于统计出这16组中的第一位是&lt;code&gt;1&lt;/code&gt;的个数, 然后用&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;操作来位移之后, 统计出16组中第二位是&lt;code&gt;1&lt;/code&gt;的个数
2. 两次之和就是16组中1的个数, 但是现在这16组并不能直接统计出结果, &lt;em&gt;但是你要是自己数的话, 已经知道了, 要这样做一开始就自己数了, 现在不是让计算机数嘛&lt;/em&gt;
3. 然后把统计出的结果二分为8组, &lt;/p&gt;</summary><category term="python"></category><category term="algorithms"></category></entry><entry><title>Python中的下划线</title><link href="/articles/pythonzhong-de-xia-hua-xian.html" rel="alternate"></link><updated>2015-03-19T11:24:39+08:00</updated><author><name>coyote</name></author><id>tag:,2015-03-19:articles/pythonzhong-de-xia-hua-xian.html</id><summary type="html">&lt;h2&gt;原文&lt;/h2&gt;
&lt;p&gt;码农周刊推送 个人翻译
原文在 --&amp;gt; &lt;a href="http://shahriar.svbtle.com/underscores-in-python"&gt;Underscores in Python By SHAHRIAR TAJBAKHSH&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;正文&lt;/h2&gt;
&lt;p&gt;本文讨论&lt;code&gt;_&lt;/code&gt;(下划线) 这个货在Python中的作用, 因为在Python中有很多时候都有使用&lt;code&gt;_&lt;/code&gt;的毛病&lt;/p&gt;
&lt;h3&gt;单个的下划线&lt;/h3&gt;
&lt;p&gt;最典型的有三种情况:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;在解释器中&lt;/strong&gt;: 用&lt;code&gt;_&lt;/code&gt;命名的目的是为了存放在交互式解释器中最后执行的结果, 首先会被标准的CPython解释器解释, 然后才是其他的&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name '&lt;/em&gt;' is not defined
42
&lt;em&gt;
42
'alright!' if _ else ':('
'alright!'
&lt;/em&gt;
'alright!'
&lt;code&gt;``
PS: 仔细观察,&lt;/code&gt;_&lt;code&gt;原来的值是42, 但是在&lt;/code&gt;if-else&lt;code&gt;之后变成了&lt;/code&gt;alright!`&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;作为变量名&lt;/strong&gt;: 有一些过去的观点认为, &lt;code&gt;_&lt;/code&gt;被当做_废弃_的变量名. 按照惯例, 这种写法会让之后的人读你代码的时候知道这个变量已经被占用不能被使用.
比如, 在一个循环中没有价值的循环计数器&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Python
n = 42
for _ in range(n):
    do_something()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;PS: 其实作者想说的意思就是, 这货就是来存放一些没意义的东西, 但是你还在代码中需要使用, 并且后续的代码也不会在去用的这个变量.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;i18n(所谓的国际化)&lt;/strong&gt;: 偶尔也可能看到&lt;code&gt;_&lt;/code&gt;被当做一个函数来用. 实际上这个函数名是用来将国际化的语言和本地语言进行查找. 其实这个创意是也是根据C语言的习惯来的.
比如你阅读&lt;a href="https://docs.djangoproject.com/en/dev/topics/i18n/translation/"&gt;Django documentation for translation&lt;/a&gt;, 你可以看到&lt;/p&gt;
&lt;p&gt;```Python
from django.utils.translation import ugettext as _
from django.http import HttpResponse&lt;/p&gt;
&lt;p&gt;def my_view(request):
    output = _("Welcome to my site.")
    return HttpResponse(output)
```&lt;/p&gt;
&lt;p&gt;PS: 特地把&lt;code&gt;gettext&lt;/code&gt; 给 &lt;code&gt;as&lt;/code&gt; 成 &lt;code&gt;_&lt;/code&gt; 我也是醉了, 其实就是一些约定俗成, 方便阅读代码的时候一眼就知道在干啥.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;变量名前的单下划线(e.g. &lt;code&gt;_shahriar&lt;/code&gt;)&lt;/h3&gt;
&lt;p&gt;变量名前面的单下划线一般会被程序猿习惯的理解成"私有". 这也是一种为了方便后人(或者你自己)阅读你的代码的时候知道, 以&lt;code&gt;_&lt;/code&gt;开头的变量是为内部所用. 像&lt;a href="https://docs.python.org/3.4/tutorial/classes.html#tut-private"&gt;Python文档&lt;/a&gt;中有说:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;a name prefixed with an underscore (e.g. _spam) should be treated as a non-public part of the API (whether it is a function, a method or a data member). It should be considered an implementation detail and subject to change without notice.&lt;/p&gt;
&lt;p&gt;一个前缀为下划线的变量名, 应该理解为不公有的API (或者一个函数, 一个方法, 一个成员变量). 这应该被认为是一个被履行的细节且在没有任何声明的时候不能改变.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;作者的PS: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我这里说的 &lt;em&gt;一种习惯&lt;/em&gt; , 是因为在解释器中实际上还有另外的意思.如果 &lt;code&gt;from &amp;lt;module/package&amp;gt; import *&lt;/code&gt;, 如果没有以&lt;code&gt;_&lt;/code&gt;开始的没用的module's/package也会被&lt;code&gt;__all__&lt;/code&gt;这货给全部包含进来. 详情查看&lt;a href="http://shahriar.svbtle.com/importing-star-in-python"&gt;importing * in Python&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;PS: 其实作者想说的谁就是, 如果你不把没用的东西用&lt;code&gt;_&lt;/code&gt;作为前缀, 当你&lt;code&gt;import *&lt;/code&gt;的时候会把这些没用的也给包含进来消耗资源.&lt;/p&gt;
&lt;h3&gt;变量名前的双下划线(e.g. &lt;code&gt;__shahriar&lt;/code&gt;)&lt;/h3&gt;
&lt;p&gt;在变量名前用&lt;code&gt;__&lt;/code&gt;(通常是在方法前面)这个并不算是一种习俗. 它在解释器中有一些特殊的含义. Python 重编了一些名字(Name mangling 也有叫名字粉碎, 我也不知道该怎么叫, 暂且叫重命名吧)为了避免和子类的名字发生冲突. 比如&lt;a href="https://docs.python.org/3.4/tutorial/classes.html#tut-private"&gt;Python文档&lt;/a&gt;中提到&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Any identifier of the form __spam (at least two leading underscores, at most one trailing underscore) is textually replaced with _classname__spam, where classname is the current class name with leading underscore(s) stripped&lt;/p&gt;
&lt;p&gt;每个类似于&lt;code&gt;__spam&lt;/code&gt; (至少两个下划线前缀,至多一个后缀下划线) 都被替换成为了类似 &lt;code&gt;_classname__spam&lt;/code&gt; 其中 &lt;code&gt;classname&lt;/code&gt;是当前类的名字&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;例:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_internal_use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;         &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__method_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;         &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt; 
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;_A__method_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;_internal_use&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;PS: 这里所说的就是等你在类里面 使用双下划线做前缀的时候, 在Python解释器中会默认的把它的原来的类名给加上&lt;/p&gt;
&lt;p&gt;正如所料, &lt;code&gt;_internal_use&lt;/code&gt; 没有被替换, 但是 &lt;code&gt;__method_name&lt;/code&gt; 被重命名为 &lt;code&gt;_ClassName__method_name&lt;/code&gt;. 如果现在你创建一个A的子类B, 你可以很轻松的重写A的 &lt;code&gt;__method_name&lt;/code&gt; 方法&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;B&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__method_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;         &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt; 
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;_A__method_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;_B__method_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;_internal_use&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其实这样做的目的就相当于 Java 中的 &lt;code&gt;final&lt;/code&gt; 关键字或者C++中的正常(非虚)函数&lt;/p&gt;
&lt;h3&gt;前后都有两个下划线的变量名 (e.g. &lt;code&gt;__init__&lt;/code&gt;)&lt;/h3&gt;
&lt;p&gt;这是Python中的特殊函数&lt;a href="https://docs.python.org/3.4/reference/datamodel.html#specialnames"&gt;Special method names&lt;/a&gt;, 这在很久以前就是一个习惯, 这种方法不会和用户定义的发生冲突, 然后你可以对他们进行调用和重写, 比如当你写一个类的时候, 你就经常会重写&lt;code&gt;__init__&lt;/code&gt; 方法&lt;/p&gt;
&lt;p&gt;没人会阻止你自己去写这种命名方式的方法(但是, 尽量别这么做):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;C&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__mine__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;         &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__mine__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最好的方法避免这种命名方式, 就是不用!&lt;/p&gt;</summary><category term="pythonnic"></category></entry><entry><title>杂念--工作两年的心路总结</title><link href="/articles/za-nian-gong-zuo-liang-nian-de-xin-lu-zong-jie.html" rel="alternate"></link><updated>2015-03-18T10:57:03+08:00</updated><author><name>coyote</name></author><id>tag:,2015-03-18:articles/za-nian-gong-zuo-liang-nian-de-xin-lu-zong-jie.html</id><summary type="html">&lt;h2&gt;背景&lt;/h2&gt;
&lt;p&gt;2013年3月到公司实习 至 2015年3月工作满两年&lt;/p&gt;
&lt;p&gt;写这个文章的时候, 是因为期间进行了两次面试, 对于我来说影响过大&lt;/p&gt;
&lt;h2&gt;从面试说起&lt;/h2&gt;
&lt;p&gt;这次面试是一次很突发奇想的面试, 突然看到朋友圈有人发了相关的介绍
我又无意注册了拉勾网, 正好这个公司也是在上面发了消息, 我又恰好投了
结果还被约去面试, 我就迷迷糊糊的去了.&lt;/p&gt;
&lt;p&gt;这个公司是一个创业公司, 15年开始创业的, 目标是做O2O的企业.&lt;/p&gt;
&lt;p&gt;面试的过程对我来说可能是打击相当大的, 一开始, 轻松加愉快的介绍了自己的工作
经历, 以及技能熟练程度&lt;/p&gt;
&lt;p&gt;后来, 技术小哥问我, 你知道MVC嘛? 面向对象呢? 设计模式? 数据结构?
算法? 我这个时候只能含糊其次, 这些都听说过么, 听说过, 都知道干嘛的么
也知道, 但是你详细说说你的理解呢? WTF 我特么什么都不知道!&lt;/p&gt;
&lt;h2&gt;反思&lt;/h2&gt;
&lt;p&gt;经过这件事, 让我开始对自己反思, 我这两年学了什么了?&lt;/p&gt;
&lt;p&gt;熟悉Python, 是这两年最大的收获, 也是提升最快的&lt;/p&gt;
&lt;p&gt;然后呢?&lt;/p&gt;
&lt;p&gt;Javascript, 也是在压力所迫之下开始渐渐数字, JQuery基本能熟练使用&lt;/p&gt;
&lt;p&gt;然后呢?&lt;/p&gt;
&lt;p&gt;C语言, 借着工作机会可以看看别人写的代码, 跟别人请教请教问题&lt;/p&gt;
&lt;p&gt;还有么?&lt;/p&gt;
&lt;p&gt;没了!&lt;/p&gt;
&lt;p&gt;那么, 也就是说, 这两年, 我只是学会了如何使用语言去编码&lt;/p&gt;
&lt;p&gt;设计一个东西, 如何去设计, 如何提高代码的质量?&lt;/p&gt;
&lt;p&gt;不能说一点不会, 肯定会根据自己总结和网上学习到的多少会一点.&lt;/p&gt;
&lt;p&gt;但是! 关键在于这个&lt;code&gt;但是!&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我并没有系统的接触到一个开发流程是什么样子&lt;/li&gt;
&lt;li&gt;我并没有体会到一个详细的开发文档该怎么去写&lt;/li&gt;
&lt;li&gt;我更不能独立的设计一个合理的高质量的代码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;怪公司, 也怪自己&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;公司体制问题, 导致开发流程被弱化, 代码管理被弱化, 考核机制仅仅用一个remind, 填报工时
一年总结一次用来考核年终奖. 导致我在体制之下, 随意的按照自己的意愿去发展自己&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;怪自己, 自己不够重视软件开发的重要性, 一切不是以代码优先, 而是需求优先, 
至今为止自己不能够设计中型, 大型的开源项目, 最多自己搞一把小的工具&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;如何&lt;/h2&gt;
&lt;p&gt;如果想要改变, 必须寻求合理的方法. &lt;/p&gt;
&lt;p&gt;改变公司的体制? 我做不到.&lt;/p&gt;
&lt;p&gt;改变自己工作氛围? 做得到. 但是牵扯个人感情&lt;/p&gt;
&lt;p&gt;改变自己工作方式? 做得到&lt;/p&gt;
&lt;h2&gt;第二次面试&lt;/h2&gt;
&lt;p&gt;这次面试的企业是我, 到现在还在喜欢着的公司, knownsec inc. 公司文化非常自由, 风格很Geek,&lt;/p&gt;
&lt;p&gt;很向往, 但是心理没底的是, 总是听说, 真的没有体会到, 不过从他们的安全研究团队来说, 还是有&lt;/p&gt;
&lt;p&gt;一定的影响力的. 恰好里面有一些我熟悉的人, 还有另外一个朋友想要去, 所以.....&lt;/p&gt;
&lt;h1&gt;To Be Continue...&lt;/h1&gt;</summary><category term="Chaos"></category></entry><entry><title>转载: idiomatic.py</title><link href="/articles/zhuan-zai-idiomaticpy.html" rel="alternate"></link><updated>2015-03-05T10:54:30+08:00</updated><author><name>coyote</name></author><id>tag:,2015-03-05:articles/zhuan-zai-idiomaticpy.html</id><summary type="html">&lt;h2&gt;背景&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新年第一篇~ 写在正月十五元宵节! 新年快乐, 过了十五就过了年, 开始进入状态工作啦~&lt;/li&gt;
&lt;li&gt;PyConChina2014在北京没看到干货, 但是杭州 @施远敏 分享了一个适合于有些基础, 但是觉得不够Pythonnic的学者&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.google.com/presentation/d/1Mer-SFLtELLtmS_QxLWbW1aEDX997JSN6eD3mCyV81k/edit?pli=1#slide=id.g475844c86_0369"&gt;原文PPT&lt;/a&gt; 在google doc上&lt;/li&gt;
&lt;li&gt;自己把这个PPT转成文章,记录下来&lt;/li&gt;
&lt;li&gt;最后像作者致敬!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Let's Go&lt;/h2&gt;
&lt;h3&gt;idiomatic python&lt;/h3&gt;
&lt;p&gt;顾名思义, 符合语言使用习惯的python代码
在我看来 idiomatic python == pythonnic&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;目录&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Idioms (风格, 所谓Python方言呗)&lt;/li&gt;
&lt;li&gt;Data Manipulation (数据操作)&lt;/li&gt;
&lt;li&gt;Control Flow (控制流)&lt;/li&gt;
&lt;li&gt;‘itertools’ (python中的迭代器)&lt;/li&gt;
&lt;li&gt;Functional Python (python的功能)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;彩蛋&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;打开python的CLI, 或者IPython, 输入&lt;code&gt;import this&lt;/code&gt;
这就是Python的信仰啦~
The Zen of Python, by Tim Peters&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# python&lt;/span&gt;
&lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="mf"&gt;2.7&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Nov&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt; &lt;span class="mi"&gt;2013&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;55&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;38&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;GCC&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;linux2&lt;/span&gt;
&lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;help&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;copyright&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;credits&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;license&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;more&lt;/span&gt; &lt;span class="n"&gt;information&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;this&lt;/span&gt;
&lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;Zen&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="n"&gt;Tim&lt;/span&gt; &lt;span class="n"&gt;Peters&lt;/span&gt;

&lt;span class="n"&gt;Beautiful&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;better&lt;/span&gt; &lt;span class="n"&gt;than&lt;/span&gt; &lt;span class="n"&gt;ugly&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;Explicit&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;better&lt;/span&gt; &lt;span class="n"&gt;than&lt;/span&gt; &lt;span class="n"&gt;implicit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;Simple&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;better&lt;/span&gt; &lt;span class="n"&gt;than&lt;/span&gt; &lt;span class="nb"&gt;complex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;Complex&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;better&lt;/span&gt; &lt;span class="n"&gt;than&lt;/span&gt; &lt;span class="n"&gt;complicated&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;Flat&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;better&lt;/span&gt; &lt;span class="n"&gt;than&lt;/span&gt; &lt;span class="n"&gt;nested&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;Sparse&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;better&lt;/span&gt; &lt;span class="n"&gt;than&lt;/span&gt; &lt;span class="n"&gt;dense&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;Readability&lt;/span&gt; &lt;span class="n"&gt;counts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;Special&lt;/span&gt; &lt;span class="n"&gt;cases&lt;/span&gt; &lt;span class="n"&gt;aren&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;t special enough to break the rules.&lt;/span&gt;
&lt;span class="n"&gt;Although&lt;/span&gt; &lt;span class="n"&gt;practicality&lt;/span&gt; &lt;span class="n"&gt;beats&lt;/span&gt; &lt;span class="n"&gt;purity&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;Errors&lt;/span&gt; &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;never&lt;/span&gt; &lt;span class="k"&gt;pass&lt;/span&gt; &lt;span class="n"&gt;silently&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;Unless&lt;/span&gt; &lt;span class="n"&gt;explicitly&lt;/span&gt; &lt;span class="n"&gt;silenced&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;face&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;ambiguity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;refuse&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;temptation&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;guess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;There&lt;/span&gt; &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;preferably&lt;/span&gt; &lt;span class="n"&gt;only&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;obvious&lt;/span&gt; &lt;span class="n"&gt;way&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;do&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;Although&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;way&lt;/span&gt; &lt;span class="n"&gt;may&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;obvious&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="n"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;re Dutch.&lt;/span&gt;
&lt;span class="n"&gt;Now&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;better&lt;/span&gt; &lt;span class="n"&gt;than&lt;/span&gt; &lt;span class="n"&gt;never&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;Although&lt;/span&gt; &lt;span class="n"&gt;never&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;often&lt;/span&gt; &lt;span class="n"&gt;better&lt;/span&gt; &lt;span class="n"&gt;than&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;If&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;implementation&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;hard&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;explain&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;s a bad idea.&lt;/span&gt;
&lt;span class="n"&gt;If&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;implementation&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;easy&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;explain&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="n"&gt;may&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;good&lt;/span&gt; &lt;span class="n"&gt;idea&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;Namespaces&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt; &lt;span class="n"&gt;honking&lt;/span&gt; &lt;span class="n"&gt;great&lt;/span&gt; &lt;span class="n"&gt;idea&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;s do more of those!&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;No.1 Idioms&lt;/h2&gt;
&lt;p&gt;不在杭州现场....不知道speaker share了什么...粗略翻译了一下...orz&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An unwritten rule (不成文的约定)&lt;/li&gt;
&lt;li&gt;A common use-case (常见的用例)&lt;/li&gt;
&lt;li&gt;Usually make the code better in: (优化代码在以下方面)&lt;/li&gt;
&lt;li&gt;Readability (可读性)&lt;/li&gt;
&lt;li&gt;Speed (运行速度)&lt;/li&gt;
&lt;li&gt;Resource usage (资源利用率)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;数据操作&lt;/h2&gt;
&lt;h3&gt;Unpacking&lt;/h3&gt;
&lt;p&gt;可以理解为把多个值付给一个变量, 在用这个变量赋给多个变量&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;s = (&amp;#39;simon&amp;#39;, &amp;#39;shi&amp;#39;, 066, &amp;#39;simonshi@gmail.com&amp;#39;)

# 一般青年
firstname = s[0]
lastname = s[1]
weight = s[2]
email = s[3]

# Python青年
firstname, lastname, weight, email = s
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;swap value&lt;/h3&gt;
&lt;p&gt;记得谭浩强的C语言书上有这样一道题, 将a和b的值进行互换&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# 一般青年
temp = a
a = b 
b = temp

# python青年
a,b = b,a

# 可能有些C青年看着不爽, 所以
a,b = (a,b)
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Don’t Underestimate&lt;/h3&gt;
&lt;p&gt;没看懂啥意思.....略....&lt;/p&gt;
&lt;h3&gt;Concatenating Strings&lt;/h3&gt;
&lt;p&gt;初学的时候经常会选择笨的办法实现需求, 但是有时候有更好的写法, 看起来更简单&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;fruits = [&amp;#39;cherry&amp;#39;, &amp;#39;coconut&amp;#39;, &amp;#39;blueberry&amp;#39;, &amp;#39;kiwi&amp;#39;]

# 普通青年
# PS: 尼玛我一开始学习的时候经常这样做啊....
s = fruits[0]
for i in fruits[1:]:
    s += &amp;#39;, &amp;#39; + f

# Python青年
print &amp;#39;, &amp;#39;.join(fruits)
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Looping over a collection&lt;/h3&gt;
&lt;p&gt;遍历的时候, 由于C语言的思想, for循环的时候经常使用数字标明当前元素是第几个&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;colors = [&amp;#39;red&amp;#39;, &amp;#39;green&amp;#39;, &amp;#39;blue&amp;#39;, &amp;#39;yellow&amp;#39;]

# 一般青年
for i in range(len(colors)):
    print colors[i]

# Python青年
for color in colors:
    print color
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Looping backwards&lt;/h3&gt;
&lt;p&gt;反向遍历的时候, 初学会非常痛苦.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# 一般青年&lt;/span&gt;
&lt;span class="s-Atom"&gt;for&lt;/span&gt; &lt;span class="s-Atom"&gt;color&lt;/span&gt; &lt;span class="s-Atom"&gt;in&lt;/span&gt; &lt;span class="nf"&gt;reversed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s-Atom"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;
    &lt;span class="s-Atom"&gt;print&lt;/span&gt; &lt;span class="s-Atom"&gt;color&lt;/span&gt;

&lt;span class="c1"&gt;# Python青年&lt;/span&gt;
&lt;span class="s-Atom"&gt;for&lt;/span&gt; &lt;span class="s-Atom"&gt;color&lt;/span&gt; &lt;span class="s-Atom"&gt;in&lt;/span&gt; &lt;span class="s-Atom"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s-Atom"&gt;::-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;
    &lt;span class="s-Atom"&gt;print&lt;/span&gt; &lt;span class="s-Atom"&gt;color&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Looping with indices&lt;/h3&gt;
&lt;p&gt;遍历列表的索引&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;colors = [&amp;#39;red&amp;#39;, &amp;#39;green&amp;#39;, &amp;#39;blue&amp;#39;, &amp;#39;yellow&amp;#39;]

# 一般青年
for i in range(len(colors)):
    print i, &amp;#39;--&amp;gt;&amp;#39;, colors[i]

# python青年
for i, color in enumerate(colors):
    print i, &amp;#39;--&amp;gt;&amp;#39;, color
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;looping over a dictionary&lt;/h3&gt;
&lt;p&gt;遍历字典的key, value&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;codes = {&amp;#39;Xian&amp;#39;: &amp;#39;29&amp;#39;, &amp;#39;Beijing&amp;#39;:&amp;#39;10&amp;#39;, &amp;#39;Shanghai&amp;#39;:&amp;#39;21&amp;#39;}
# 一般青年
for k in codes:
    print k, &amp;#39;--&amp;gt;&amp;#39;, codes[k]

# Python 青年
for k, v in codes.items():
    print k, &amp;#39;--&amp;gt;&amp;#39;, v

for k, v in codes.iteritems():
    print k, &amp;#39;--&amp;gt;&amp;#39;, v
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;‘defaultdict’&lt;/h3&gt;
&lt;p&gt;如何使用 'defaultdict'&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;names = [&amp;#39;james&amp;#39;, &amp;#39;peter&amp;#39;, &amp;#39;simon&amp;#39;, &amp;#39;jack&amp;#39;, &amp;#39;john&amp;#39;, &amp;#39;lawrence&amp;#39;]
# 期望得到
{8: [&amp;#39;lawrence&amp;#39;], 4: [&amp;#39;jack&amp;#39;, &amp;#39;john&amp;#39;], 5: [&amp;#39;james&amp;#39;, &amp;#39;peter&amp;#39;, &amp;#39;simon&amp;#39;]}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;一般青年&lt;/strong&gt;
思考了很久写出了&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;groups = {}
for name in names:
    key = len(name)
    if key not in groups:
        groups[key] = []
    groups[key].append(name)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Python 青年&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# 先用 ‘setdefault’ 来给字典赋默认值&lt;/span&gt;
&lt;span class="n"&gt;groups&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;groups&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setdefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# 用‘defaultdict’生成结果&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;defaultdict&lt;/span&gt;
&lt;span class="n"&gt;groups&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;defaultdict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;groups&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Comprehensions&lt;/h3&gt;
&lt;p&gt;列表解析&lt;/p&gt;
&lt;p&gt;题目:&lt;em&gt;判断一个列表中的所有数字是否为奇数, 并且生成一个新的列表用True或False来标明&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一般青年&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;A, odd_or_even = [1, 1, 2, 3, 5, 8, 13, 21], []
for number in A:
    odd_or_even.append(isOdd(number))

# 结果
[True, True, False, True, True, False, True, True]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Python 青年&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;A = [1, 1, 2, 3, 5, 8, 13, 21]

[isOdd(a) for a in A]
[True, True, False, True, True, False, True, True]

# Or

[a for a in A if a%2 != 0]
[1, 1, 3, 5, 13, 21]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;扩充理解&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;List: [a**2 for a in A]
[1, 1, 4, 9, 25, 64, 169, 441]

Set: {int(sqrt(a)) for a in A}
set([1, 2, 3, 4])

Dict: {a:a%3 for a in A if a%3}
{8: 2, 1: 1, 2: 2, 5: 2, 13: 1}
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;控制流&lt;/h2&gt;
&lt;h3&gt;Truthiness&lt;/h3&gt;
&lt;p&gt;判断真假, 也就是True 或 False&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# 一般青年
if names != []:
…
if foo == True:
…

# Python 青年
if names:
…
if foo:
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里作者列了一些判断的时候都是False的常见形式
也就是说 用 &lt;code&gt;if ... : ....&lt;/code&gt; 的时候判断都是False&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;None&lt;/li&gt;
&lt;li&gt;False&lt;/li&gt;
&lt;li&gt;zero for numeric types  &lt;em&gt;数字0&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;empty sequence, e.g. [], tuple() &lt;em&gt;空序列,如:&lt;code&gt;[]&lt;/code&gt;和&lt;code&gt;()&lt;/code&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;empty dictionaries  &lt;em&gt;空字典&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;a value of 0 or False returned when either &lt;code&gt;__len__&lt;/code&gt; or &lt;code&gt;__non_zero__&lt;/code&gt; is called &lt;em&gt;当一些返回值为0或者False的方法或者类&lt;/em&gt;
这里&lt;code&gt;__len__&lt;/code&gt; 返回0 应该很好理解
不好理解的是&lt;code&gt;_non_zero__&lt;/code&gt;
举个栗子:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;A:&lt;/span&gt;
  &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__non_zero__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;):  &lt;span class="c-Singleline"&gt;# 这里有一点是错误, 不知道是Py3还是啥, 我在py2.7版本中叫__nonzero__&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;False&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;():
   &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;A is True&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;else:&lt;/span&gt;
   &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;A is False&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里的意思是说, 判断A的这个类的布尔值, 可以通过&lt;code&gt;__nonzero__&lt;/code&gt; 这个方法来改变&lt;/p&gt;
&lt;h3&gt;if-in&lt;/h3&gt;
&lt;p&gt;判断某个值是否在某个集合当中&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# 一般青年
is_generic_color = False
if color == &amp;#39;red&amp;#39; or color == &amp;#39;green&amp;#39; or color == &amp;#39;blue&amp;#39;:
    is_generic_color = True



# Python青年
is_generic_color = color in (&amp;#39;red&amp;#39;, &amp;#39;green&amp;#39;, &amp;#39;blue&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;for-else&lt;/h3&gt;
&lt;p&gt;谁也没想到还有 &lt;code&gt;for-else&lt;/code&gt; 的用法吧&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ages = [42, 21, 18, 33, 19]

# 一般青年
are_all_adult = True
for age in ages:
    if age &amp;lt; 18:
        are_all_adult = False
        break

if are_all_adult:
    print &amp;#39;All are adults!&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Python青年要来喽&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ages = [42, 21, 18, 33, 19]

# Python青年
for age in ages:
    if age &amp;lt; 18:
        break
else: # 如果循环没有跳出则执行
    print &amp;#39;All are adults!&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Context Manager&lt;/h3&gt;
&lt;p&gt;上下文管理器&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# 一般青年
f = open(&amp;#39;data.csv&amp;#39;)
try:
    data = f.read()
finally:
    f.close()

# Python 青年
with open(&amp;#39;data.csv&amp;#39;) as f:
    data = f.read()
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;import itertools&lt;/h2&gt;
&lt;p&gt;这章讲的都是itertools的库中的方法, 所以默认前提是&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Looping with two collections&lt;/h3&gt;
&lt;p&gt;遍历两个集合
示例中想要吧两个列表中的元素进行一一对应, 但是长度不同, 需要进行处理&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;colors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;red&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;blue&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;green&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;yellow&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;cherry&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;blueberry&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;kiwi&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c"&gt;# 一般青年&lt;/span&gt;
&lt;span class="n"&gt;min_len&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min_len&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;--&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c"&gt;# Python 青年&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;izip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;span class="c"&gt;# 此处的izip 是from itertools import izip&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;--&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Building Dictionaries&lt;/h3&gt;
&lt;p&gt;合并成为字典&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# 要求
fruits = [&amp;#39;cherry&amp;#39;, &amp;#39;blueberry&amp;#39;, &amp;#39;kiwi&amp;#39;, &amp;#39;mango&amp;#39;]
colors = [&amp;#39;red&amp;#39;, &amp;#39;blue&amp;#39;, &amp;#39;green&amp;#39;, &amp;#39;yellow&amp;#39;]

# 合并成为
{&amp;#39;kiwi&amp;#39;: &amp;#39;green&amp;#39;, &amp;#39;cherry&amp;#39;: &amp;#39;red&amp;#39;, &amp;#39;mango&amp;#39;: &amp;#39;yellow&amp;#39;, &amp;#39;blueberry&amp;#39;: &amp;#39;blue&amp;#39;}

# 一般青年
pairs = {}
for fruit, color in izip(fruits, colors):
    pairs[fruit] = color

# PS:尼玛明明是刚才就是这么教的! 怎么变成一般青年了

# Python青年
pairs = dict(izip(fruits, colors))
# 草泥马奔腾....Python 就是总能用极简方式做事
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;groupby&lt;/h3&gt;
&lt;p&gt;根据字母的多少进行分类&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# 要求
names = [&amp;#39;james&amp;#39;, &amp;#39;peter&amp;#39;, &amp;#39;simon&amp;#39;, &amp;#39;jack&amp;#39;, &amp;#39;john&amp;#39;, &amp;#39;lawrence&amp;#39;]
# 实现
{8: [&amp;#39;lawrence&amp;#39;], 4: [&amp;#39;jack&amp;#39;, &amp;#39;john&amp;#39;], 5: [&amp;#39;james&amp;#39;, &amp;#39;peter&amp;#39;, &amp;#39;simon&amp;#39;]}

# 使用 itertools
{k:list(v) for k, v in groupby(names, len)}

# PS: 尼玛上面说的方法又被简化了....
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;More&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;chain([1,2,3], ['a','b'], [4]) ==&amp;gt; 1,2,3,'a','b',4&lt;/li&gt;
&lt;li&gt;repeat('A', 3) ==&amp;gt; 'A' 'A' 'A'&lt;/li&gt;
&lt;li&gt;cycle('ABCD') ==&amp;gt; A B C D A B C D ...&lt;/li&gt;
&lt;li&gt;compress('ABCDEF', [1,0,1,0,1,1]) ==&amp;gt; A C E F&lt;/li&gt;
&lt;li&gt;combinations/permutations/product
...&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Functional Python&lt;/h2&gt;
&lt;p&gt;说到这里就有些高大上了, 前面目录翻译的时候,没有想到那么多, 就翻译成了Python的功能,
到这里为止就看明白了, 原来是代表函数式编程的Python, 前面的也就不改了.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Imperative programming (命令式编程: C/C++, Java)&lt;/li&gt;
&lt;li&gt;Declarative programming (声明式编程)&lt;/li&gt;
&lt;li&gt;Functional programming (函数式编程: Lisp, Haskell, OCaml)&lt;/li&gt;
&lt;li&gt;Logic programming (逻辑式编程: Prolog, Clojure)&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Functions are data, too. Can be passed through and manipulated like data.
函数也是数据. 它也可以像数据一样被传递和操纵&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;partial&lt;/h3&gt;
&lt;p&gt;偏函数?! 这玩意是啥啊....&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# 一般青年&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;[{level}]: {msg}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;log_debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;debug&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;log_warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;warn&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_log_with_level&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;log_with_level&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;log_with_level&lt;/span&gt;

&lt;span class="c"&gt;# construct functions like data&lt;/span&gt;
&lt;span class="n"&gt;log_debug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_log_with_level&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;debug&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;log_warn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_log_with_level&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;warn&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# 意思就是说&lt;/span&gt;
&lt;span class="c"&gt;# 函数在执行时，要带上所有必要的参数进行调用。但是，有时参数可以在函数被调用之前提前获知。这种情况下，一个函数有一个或多个参数预先就能用上，以便函数能用更少的参数进行调用。&lt;/span&gt;

&lt;span class="c"&gt;# Python青年&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;partial&lt;/span&gt;
&lt;span class="c"&gt;# log 为上面定义过的那个函数&lt;/span&gt;
&lt;span class="n"&gt;log_debug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;debug&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;log_warn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;warn&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Decorator&lt;/h3&gt;
&lt;p&gt;装饰器, 个人认为装饰器是Python中一个比较华丽的东西了, 如果用好了事半功倍, 如果用不好事倍功半&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# 混合了业务逻辑和管理逻辑&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;web_lookup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{}):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c"&gt;# 使用装饰器&lt;/span&gt;

&lt;span class="nd"&gt;@cache&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;web_lookup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;wraps&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;saved&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="nd"&gt;@wraps&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;new_func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;saved&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;saved&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;saved&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;new_func&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Combine&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nx"&gt;imperative&lt;/span&gt; &lt;span class="nx"&gt;way&lt;/span&gt;
&lt;span class="nx"&gt;expr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;28++32+++32+39&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;expr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;+&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="kr"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;split&lt;/span&gt;
&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;28&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;32&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;32&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;39&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nx"&gt;functional&lt;/span&gt; &lt;span class="nx"&gt;way&lt;/span&gt;
&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;expr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;+&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nx"&gt;step&lt;/span&gt; &lt;span class="nx"&gt;by&lt;/span&gt; &lt;span class="nx"&gt;step&lt;/span&gt;
&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;28&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;32&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;32&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;39&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;

&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pred&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="nx"&gt;for&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;seq&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;pred&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;
&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;28&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;32&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;32&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;39&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;

&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;func&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;for&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;seq&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;
&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;39&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这一节大概意思能看懂, 但是不能理解的非常透彻. 望请高手指点
主要核心思想体现在&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;res = sum(map(int, filter(bool, expr.split(&amp;#39;+&amp;#39;))))
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Map&lt;/h3&gt;
&lt;p&gt;呐呐呐...这里开始解释上面用到的map啦&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;B = map(func, A)
┌───────┐     ┌─────────┐
│  a1   │ --&amp;gt; │ func(a1)│
│  a2   │ --&amp;gt; │ func(a2)│
│  a3   │ --&amp;gt; │ func(a3)│
│  an   │ --&amp;gt; │ func(an)│
└───────┘     └─────────┘
    A             B
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;也就是说 map的功能就是将A当做参数, 把A中的a1,a2,a3....an传递给func
结果集返回给B&lt;/p&gt;
&lt;h3&gt;all&lt;/h3&gt;
&lt;p&gt;比for-else更加的传神, 23333&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ages = [42, 21, 18, 33, 19]

# more expressive than using ‘for-else’
if all(map(lambda a:a&amp;gt;=18, ages)):
    print &amp;#39;All are adults!&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Fluent Interface&lt;/h3&gt;
&lt;p&gt;啥意思捏? O.O  上码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;expr = &amp;#39;28++32+++32+39&amp;#39;
IterHelper(expr.split(&amp;#39;+&amp;#39;)).filter(bool).map(int).sum()
ages = [42, 21, 18, 33, 19]
IterHelper(ages).map(lambda x:x&amp;gt;=18).all()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;还是不懂啊.....&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;IterHelper&lt;/span&gt;(&lt;span class="n"&gt;object&lt;/span&gt;):
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="n"&gt;iterable&lt;/span&gt; = []):
        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;iterable&lt;/span&gt; = &lt;span class="n"&gt;iterable&lt;/span&gt;

    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;dump&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;):
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;iterable&lt;/span&gt;)

    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="n"&gt;func&lt;/span&gt;):
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;IterHelper&lt;/span&gt;(&lt;span class="n"&gt;itertools&lt;/span&gt;.&lt;span class="n"&gt;imap&lt;/span&gt;(&lt;span class="n"&gt;func&lt;/span&gt;, &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;iterable&lt;/span&gt;))

    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;filter&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="n"&gt;predicate&lt;/span&gt;):
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;IterHelper&lt;/span&gt;(&lt;span class="n"&gt;itertools&lt;/span&gt;.&lt;span class="n"&gt;ifilter&lt;/span&gt;(&lt;span class="n"&gt;predicate&lt;/span&gt;, &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;iterable&lt;/span&gt;))

    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;):
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;iterable&lt;/span&gt;)

    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="nb"&gt;all&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;):
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;all&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;iterable&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;哦哦, 原来如此, 作者是说可以写成&lt;code&gt;IterHelper(expr.split('+')).filter(bool).map(int).sum()&lt;/code&gt;
这种形式的接口应该怎么写&lt;/p&gt;
&lt;h2&gt;结束语&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;I have made this longer than usual because I have not had time to make it shorter.
-- Blaise Pascal (1623-1662)&lt;/p&gt;
&lt;p&gt;之所以写了这么长, 是因为我没有时间简化他
-- 布莱士.帕斯卡&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Bigger than Bigger&lt;/h2&gt;
&lt;p&gt;把作者的这个玩意扔进ipython里&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;In [22]: &amp;#39; &amp;#39;.join(&amp;#39;{0:08b}&amp;#39;.format(ord(x)) for x in &amp;#39;Bigger Than Bigger!&amp;#39;)
Out[22]: &amp;#39;01000010 01101001 01100111 01100111 01100101 01110010 00100000 01010100 01101000 01100001 01101110 00100000 01000010 01101001 01100111 01100111 01100101 01110010 00100001&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;哈哈, 是在说逼格儿嘛&lt;/p&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html"&gt;code like a pythonista&lt;/a&gt;
&lt;a href="https://docs.python.org/2/library/itertools.html"&gt;itertools&lt;/a&gt;
&lt;a href="http://ua.pycon.org/static/talks/kachayev"&gt;functional python&lt;/a&gt;
&lt;a href="https://docs.python.org/2/library/functools.html"&gt;functools&lt;/a&gt;
&lt;a href="http://pydash.readthedocs.org/en/latest/"&gt;pydash&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;感谢作者!!!&lt;/h2&gt;</summary><category term="pythonnic"></category></entry><entry><title>linxu终端烦人的ctrl+s</title><link href="/articles/linxuzhong-duan-fan-ren-de-ctrls.html" rel="alternate"></link><updated>2015-02-06T10:21:20+08:00</updated><author><name>coyote</name></author><id>tag:,2015-02-06:articles/linxuzhong-duan-fan-ren-de-ctrls.html</id><summary type="html">&lt;h2&gt;问题&lt;/h2&gt;
&lt;p&gt;最近折腾了一下终端的个性化定制, 以及vim定制, 并且管理了自己的Dotfile&lt;/p&gt;
&lt;p&gt;但是遇到一个烦人的问题, 快捷键里面有个&lt;code&gt;ctrl+a&lt;/code&gt;经常被我给按成&lt;code&gt;ctrl+s&lt;/code&gt;, 频率还不低&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ctrl+s&lt;/code&gt;这个键组合在linux里面是&lt;code&gt;锁定屏幕显示&lt;/code&gt; 搜了一下很多小白都遇到这个锁定屏幕之后不知所措&lt;/p&gt;
&lt;p&gt;然后只好关掉终端重新打开. 网上也有解决方案就是按下&lt;code&gt;ctrl + q&lt;/code&gt; 就能恢复.&lt;/p&gt;
&lt;h2&gt;思考&lt;/h2&gt;
&lt;p&gt;这个&lt;code&gt;ctrl+s&lt;/code&gt; 的功能到底谁会用啊....同样的按键&lt;code&gt;ScrollLock&lt;/code&gt;完全能用啊, 再按一下又恢复了嘛&lt;/p&gt;
&lt;p&gt;所以考虑关掉这个该死的按键, 但是壮哉我大百度是不会给出解决方案的, 还得问我&lt;strong&gt;大表哥&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ctrl+s&lt;/code&gt; 会像终端发起一个&lt;code&gt;XOFF&lt;/code&gt; 的信号&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stty&lt;/code&gt; linux是设置终端属性的命令&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;方案&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;man stty&lt;/code&gt; 查看man手册&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[-]ixoff
   enable sending of start/stop characters
[-]ixon
   enable XON/XOFF flow control&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以只需要输入&lt;code&gt;stty ixoff -ixon&lt;/code&gt;&lt;strong&gt;'-'代表禁用&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;再按下&lt;code&gt;ctrl+s&lt;/code&gt; 是不是不会假死了;-)&lt;/p&gt;
&lt;p&gt;当然会转换成&lt;code&gt;(i-search)':&lt;/code&gt; 这个玩意目前还没有很好的解决方法...欢迎告诉我..&lt;/p&gt;</summary><category term="linxu个性化"></category></entry><entry><title>Sublime Text 3 注册码</title><link href="/articles/sublime-text-3-zhu-ce-ma.html" rel="alternate"></link><updated>2015-01-12T12:10:26+08:00</updated><author><name>coyote</name></author><id>tag:,2015-01-12:articles/sublime-text-3-zhu-ce-ma.html</id><summary type="html">&lt;h2&gt;注册码&lt;/h2&gt;
&lt;p&gt;版本: Build 3065&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;—– BEGIN LICENSE —–
Andrew Weber
Single User License
EA7E-855605
813A03DD 5E4AD9E6 6C0EEB94 BC99798F
942194A6 02396E98 E62C9979 4BB979FE
91424C9D A45400BF F6747D88 2FB88078
90F5CC94 1CDC92DC 8457107A F151657B
1D22E383 A997F016 42397640 33F41CFC
E1D0AE85 A0BBD039 0E9C8D55 E1B89D5D
5CDB7036 E56DE1C0 EFCC0840 650CD3A6
B98FC99C 8FAC73EE D2B95564 DF450523
—— END LICENSE ——
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;PS&lt;/h2&gt;
&lt;p&gt;70刀的购买对于现在穷逼的我真心是没有闲钱买, 所以只好从网上搜注册机, 注册码
但是新版本的exe已经不能用网上流传的subl2的注册机来进行破解了, 所以只能用注册码&lt;/p&gt;
&lt;p&gt;尝试了n多注册码之后, 发现唯一可用的就是此码
我搜到的连接是 &lt;a href="http://www.tony77.com/archives/348.html"&gt;汪星人陈达&lt;/a&gt; 的一篇博文&lt;/p&gt;
&lt;p&gt;再次感谢分享着, 同时也承诺, 有朝一日我会买正版的!!!!
留下连接为证!!! &lt;a href="https://www.sublimetext.com/buy"&gt;正版购买连接&lt;/a&gt;&lt;/p&gt;</summary><category term="python"></category><category term="破解"></category></entry><entry><title>转载:Pocoo风格指引--指引自己强制遵守</title><link href="/articles/zhuan-zai-pocoofeng-ge-zhi-yin-zhi-yin-zi-ji-qiang-zhi-zun-shou.html" rel="alternate"></link><updated>2015-01-07T12:42:55+08:00</updated><author><name>coyote</name></author><id>tag:,2015-01-07:articles/zhuan-zai-pocoofeng-ge-zhi-yin-zhi-yin-zi-ji-qiang-zhi-zun-shou.html</id><summary type="html">&lt;h2&gt;警醒自己&lt;/h2&gt;
&lt;p&gt;良好的项目团队就有良好的编码风格, 成为一个Pythonic的Pythoner
必须有好的学习精神. 如何写出Pythonic的代码, 个人参考考本文中Pocoo的风格
推荐阅读本文的初学者, 一起使用! Be Pythonic~&lt;/p&gt;
&lt;h2&gt;正文&lt;/h2&gt;
&lt;p&gt;Pocoo 风格指引是所有 Pocoo 项目的风格指引，包括 Flask 。这份风格指引
在 Flask 补丁中是必须的，并且推荐在 Flask 扩展中使用。&lt;/p&gt;
&lt;p&gt;一般而言， Pocoo 风格指引遵循 &lt;code&gt;pep8&lt;/code&gt; ，有一些小差异和扩充。&lt;/p&gt;
&lt;h2&gt;总体布局&lt;/h2&gt;
&lt;h3&gt;缩进&lt;/h3&gt;
&lt;p&gt;4个空格。没有制表符，没有例外。&lt;/p&gt;
&lt;h3&gt;最大行长&lt;/h3&gt;
&lt;p&gt;79字符，软限制是 84 ，如果绝对必要。尝试合理放置 &lt;code&gt;break&lt;/code&gt; 、 &lt;code&gt;continue&lt;/code&gt;
  和 &lt;code&gt;return&lt;/code&gt; 声明来避免代码过度嵌套。&lt;/p&gt;
&lt;h3&gt;可续长语句&lt;/h3&gt;
&lt;p&gt;你可以使用反斜线来继续一个语句，在这种情况下，你应该对齐下一行到最后一个
  点或等号或缩进四个空格&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="sx"&gt;this_is_a_very_long(function_call,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;with many parameters&amp;#39;&lt;/span&gt;&lt;span class="sx"&gt;)&lt;/span&gt; &lt;span class="sx"&gt;\&lt;/span&gt;
        &lt;span class="sx"&gt;.that_returns_an_object_with_an_attribute&lt;/span&gt;

    &lt;span class="sx"&gt;MyModel.query.filter(MyModel.scalar&lt;/span&gt; &lt;span class="sx"&gt;&amp;gt;&lt;/span&gt; &lt;span class="sx"&gt;120)&lt;/span&gt; &lt;span class="sx"&gt;\&lt;/span&gt;
                 &lt;span class="sx"&gt;.order_by(MyModel.name.desc())&lt;/span&gt; &lt;span class="sx"&gt;\&lt;/span&gt;
                 &lt;span class="sx"&gt;.limit(10)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果你在一个带括号的语句中换行，对齐到括号&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="nx"&gt;this_is_a_very_long&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;function_call&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;with many parameters&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;and even more&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;对于有许多元素的元组或列表，在起始括号后立即换行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    items = [
        &amp;#39;this is the first&amp;#39;, &amp;#39;set of items&amp;#39;, &amp;#39;with more items&amp;#39;,
        &amp;#39;to come in this line&amp;#39;, &amp;#39;like this&amp;#39;
    ]
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;空行&lt;/h3&gt;
&lt;p&gt;顶层函数和类由两个空行分隔，其它的东西由一行。不要使用太多的空行来分隔
  代码中的逻辑段。例如::&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;def hello(name):
    print &amp;#39;Hello %s!&amp;#39; % name


def goodbye(name):
    print &amp;#39;See you %s.&amp;#39; % name


class MyClass(object):
    &amp;quot;&amp;quot;&amp;quot;This is a simple docstring&amp;quot;&amp;quot;&amp;quot;

    def __init__(self, name):
        self.name = name

    def get_annoying_name(self):
        return self.name.upper() + &amp;#39;!!!!111&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;表达式和语句&lt;/h2&gt;
&lt;h3&gt;常规空格规则&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;不对不是单词的一元运算符使用空格（例如 &lt;code&gt;-&lt;/code&gt; 、 &lt;code&gt;~&lt;/code&gt; 等等），
    在圆括号内同样&lt;/li&gt;
&lt;li&gt;在二元运算符见使用空格&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Good &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    exp = -1.05
    value = (item_value / item_count) * offset / exp
    value = my_list[index]
    value = my_dict[&amp;#39;key&amp;#39;]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Bad&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    exp = - 1.05
    value = ( item_value / item_count ) * offset / exp
    value = (item_value/item_count)*offset/exp
    value=( item_value/item_count ) * offset/exp
    value = my_list[ index ]
    value = my_dict [&amp;#39;key&amp;#39;]
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;不能使用 Yoda 语句&lt;/h3&gt;
&lt;p&gt;永远不要用常量与变量做比较，而是把变量与常量做比较&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Good&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    if method == &amp;#39;md5&amp;#39;:
        pass
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;Bad&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    if &amp;#39;md5&amp;#39; == method:
        pass
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;比较&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;跟任意类型: &lt;code&gt;==&lt;/code&gt; 和 &lt;code&gt;!=&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;跟单例，使用 &lt;code&gt;is&lt;/code&gt; 和 &lt;code&gt;is not&lt;/code&gt; （例如 &lt;code&gt;foo is not
    None&lt;/code&gt; ）&lt;/li&gt;
&lt;li&gt;永远不要与 &lt;code&gt;True&lt;/code&gt; 或 &lt;code&gt;False&lt;/code&gt; 做比较（比如永远不要
    写 &lt;code&gt;foo == False&lt;/code&gt; ，而是 &lt;code&gt;not foo&lt;/code&gt; ）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;否定包含检查&lt;/h3&gt;
&lt;p&gt;使用 &lt;code&gt;foo not in bar&lt;/code&gt; 而不是 &lt;code&gt;not foo in bar&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;实例检查&lt;/h3&gt;
&lt;p&gt;用 &lt;code&gt;isinstance(a, C)&lt;/code&gt; 而不是 &lt;code&gt;type(A) is C&lt;/code&gt; ， 但通常试图避免
  实例检查，请对特性检查。&lt;/p&gt;
&lt;h2&gt;命名约定&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;类名: &lt;code&gt;CamelCase&lt;/code&gt; ，缩写词大写 （ &lt;code&gt;HTTPWriter&lt;/code&gt; 而非 &lt;code&gt;HttpWriter&lt;/code&gt; ）&lt;/li&gt;
&lt;li&gt;变量名: &lt;code&gt;lowercase_with_underscores&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;方法和函数名: &lt;code&gt;lowercase_with_underscores&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;常量: &lt;code&gt;UPPERCASE_WITH_UNDERSCORES&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;预编译正则表达式: &lt;code&gt;name_re&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;被保护的成员以单个下划线作为前缀，双下划线为混合类保留。&lt;/p&gt;
&lt;p&gt;在带有关键字的类上，会添加结尾的下划线。与内置构件冲突是允许的，并且
&lt;strong&gt;一定不要&lt;/strong&gt; 在用在变量名后添加下划线的方式解决。如果函数需要访问一个隐蔽
的内置构件，重绑定内置构件到一个不同的名字作为替代。&lt;/p&gt;
&lt;p&gt;函数和方法参数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;类方法: &lt;code&gt;cls&lt;/code&gt; 作为第一个参数&lt;/li&gt;
&lt;li&gt;实例方法: &lt;code&gt;self&lt;/code&gt; 作为第一个参数&lt;/li&gt;
&lt;li&gt;属性的 lambda 表达式应该把第一个参数替换为 &lt;code&gt;x&lt;/code&gt; ，像 &lt;code&gt;display_name = 
    property(lambda x: x.real_name or x.username)&lt;/code&gt; 中一样&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;文档字符串&lt;/h2&gt;
&lt;h3&gt;文档字符串约定&lt;/h3&gt;
&lt;p&gt;所有的文档字符串为 Sphinx 可理解的 reStructuredText 格式。它们的形态
  因行数不同而迥异。如果只有一行，闭合的三引号和开头的三引号在同一行，
  否则开头的三引号与文本在同一行，而闭合的三引号另起一行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    def foo():
        &amp;quot;&amp;quot;&amp;quot;This is a simple docstring&amp;quot;&amp;quot;&amp;quot;


    def bar():
        &amp;quot;&amp;quot;&amp;quot;This is a longer docstring with so much information in there
        that it spans three lines.  In this case the closing triple quote
        is on its own line.
        &amp;quot;&amp;quot;&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;模块标头&lt;/h3&gt;
&lt;p&gt;模块标头包含一个 utf-8 编码声明（即使没有使用非 ASCII 字符，也始终推
  荐这么做）和一个标准的文档字符串&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    # -*- coding: utf-8 -*-
    &amp;quot;&amp;quot;&amp;quot;
        package.module
        ~~~~~~~~~~~~~~

        A brief description goes here.

        :copyright: (c) YEAR by AUTHOR.
        :license: LICENSE_NAME, see LICENSE_FILE for more details.
    &amp;quot;&amp;quot;&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;请留意何时的版权和许可证文件对于通过审核的 Flask 扩展是必须的。&lt;/p&gt;
&lt;h2&gt;注释&lt;/h2&gt;
&lt;p&gt;注释的规则和文档字符串类似。两者都使用 reStructuredText 格式。如果一个
注释被用于一个属性的文档，在起始的井号（ &lt;code&gt;#&lt;/code&gt; ）后加一个冒号&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;(&lt;span class="n"&gt;object&lt;/span&gt;):
        &lt;span class="c-Singleline"&gt;#: the name of the user as unicode string&lt;/span&gt;
        &lt;span class="nb"&gt;name&lt;/span&gt; = &lt;span class="n"&gt;Column&lt;/span&gt;(&lt;span class="n"&gt;String&lt;/span&gt;)
        &lt;span class="c-Singleline"&gt;#: the sha1 hash of the password + inline salt&lt;/span&gt;
        &lt;span class="n"&gt;pw_hash&lt;/span&gt; = &lt;span class="n"&gt;Column&lt;/span&gt;(&lt;span class="n"&gt;String&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;</summary><category term="python"></category><category term="PEP8"></category></entry><entry><title>PyChina社区 与 Ruby社区的几点对比</title><link href="/articles/pychinashe-qu-yu-rubyshe-qu-de-ji-dian-dui-bi.html" rel="alternate"></link><updated>2014-12-31T16:28:47+08:00</updated><author><name>coyote</name></author><id>tag:,2014-12-31:articles/pychinashe-qu-yu-rubyshe-qu-de-ji-dian-dui-bi.html</id><summary type="html">&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;sting 和 ZQ(大妈) 一直在为PyChina 和 PyConChina的事情忙前忙后
制定方案, 提供资源, 但是碍于时间精力, 而且仅靠二人之力无法完成
如此庞大的社区建设, 而且很多事情不能通过一个人的思想去发展, 
我们应当发挥志愿者的能力, 集思广益, 为我们Pythoner 做一些 Pythonic的事情&lt;/p&gt;
&lt;h2&gt;故&lt;/h2&gt;
&lt;p&gt;倡议志愿者们拿出自己的想法&lt;/p&gt;
&lt;h2&gt;我的想法&lt;/h2&gt;
&lt;p&gt;隔壁家老王(Ruby-China),好评度一致很高, 最起码四星半&lt;/p&gt;
&lt;h3&gt;WHY!!!&lt;/h3&gt;
&lt;h4&gt;线上社区 ruby-china.org 10月份上线, 目前已经是中国最活跃的Ruby线上社区&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;原因&lt;ul&gt;
&lt;li&gt;作为权威社区召集散落在中国的Ruby fans, 提供高质量交流平台.&lt;/li&gt;
&lt;li&gt;无论干活软文, 小白求救在该平台都能够得到应有的结果, 所以活跃度很高.&lt;/li&gt;
&lt;li&gt;得到忠实粉丝用户, 各处宣传Ruby社区是好的, 所以好评度上升.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;借鉴&lt;ul&gt;
&lt;li&gt;以PyChina的名义, 建立线上社区, 召集属于Python的Pythoner&lt;/li&gt;
&lt;li&gt;提供Pythoner讨论的平台, BBS? CMS? MailList? etc. 总之让Pythoner不在活跃在自己的世界里&lt;/li&gt;
&lt;li&gt;pychina.org 实际已经存在, 但是只有大妈一个人 wiki/ cms/ etc. 总之,红袖标大妈一直是一个人在战斗&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Ruby Conf China 2014 赞助商从数量上看, 没有比PyConChina数量少, 但是议题质量依旧很高.&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;原因&lt;ul&gt;
&lt;li&gt;依托于线上社区?&lt;/li&gt;
&lt;li&gt;对于赞助商有要求. 硬相关 or 软相关&lt;/li&gt;
&lt;li&gt;准备充分&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;借鉴&lt;ul&gt;
&lt;li&gt;重新建立线上社区 or  提高原有线上社区活跃度&lt;/li&gt;
&lt;li&gt;充分准备 (已经做到, "PyCon2015中国-大会组织-总进度表.xlsx" 已经发布, 认领ing,讨论ing,投票ing)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;ruby-china VS. CPyUG and Woodpecker&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;问题&lt;ul&gt;
&lt;li&gt;R: 新上线, 精华贴,总结帖 P:活跃度下降, maillist 讨论进度缓慢&lt;/li&gt;
&lt;li&gt;R:邮箱注册, 发帖/回复一条龙服务 P: 加入程序复杂 (GFW), 没办法发帖/回复  少数DISQUS&lt;/li&gt;
&lt;li&gt;R:犹如挖掘技术哪家强!!!   P:知名度对于 Python 初学者 or 小白 几乎是0 而且加入途中困难重重&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;解决&lt;ul&gt;
&lt;li&gt;宣传力度不够? 百度Python 社区  找不到相关&lt;/li&gt;
&lt;li&gt;加入难度高  百度Python 社区  ---&amp;gt;  发现python.cn ---&amp;gt; 跳转google group (GFW..放弃) ---&amp;gt; Woodpecker ---&amp;gt; 一堆URL ---&amp;gt;
找不到讨论平台 ---&amp;gt; 关掉 ---&amp;gt;  访问其他&lt;/li&gt;
&lt;li&gt;年岁已老需要更新换代?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;其他平台&lt;/h4&gt;
&lt;p&gt;知乎/ gitcafe/ github/ sf.gg/ weibo 没有得到合理利用&lt;/p&gt;
&lt;p&gt;以上.....个人总结, 欢迎来辩&lt;/p&gt;
&lt;h2&gt;补充&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://pychina.org/"&gt;PyChina.org&lt;/a&gt; 一个CMS的Pelican博客, 需要兼职 SA 来增补各种社区基础设施&lt;/li&gt;
&lt;li&gt;&lt;a href="http://weekly.pychina.org/"&gt;PyWeekly&lt;/a&gt; &lt;a href="http://zoomquiet.io/"&gt;@ZQ&lt;/a&gt; 大妈负责翻译的周刊, 是需要协作翻译,在赶上周刊历史所有 issue 的快译后,成为官方中文版, 就多一个将国产妙物推荐给外国小伙伴的稳定渠道呢!&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cn.pycon.org/"&gt;PyConChina&lt;/a&gt; 招募长期兼职志愿者来运维官网哪&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有志愿意向联系我, 技术工种, 文案工种 大量&lt;/p&gt;</summary><category term="python"></category><category term="PyChina"></category></entry><entry><title>linxu终端烦人的"哔哔"声</title><link href="/articles/linxuzhong-duan-fan-ren-de-bi-bi-sheng.html" rel="alternate"></link><updated>2014-12-20T09:00:48+08:00</updated><author><name>coyote</name></author><id>tag:,2014-12-20:articles/linxuzhong-duan-fan-ren-de-bi-bi-sheng.html</id><summary type="html">&lt;h3&gt;问题&lt;/h3&gt;
&lt;p&gt;不知道有多少人跟我遇到过同样的问题, 因为本人使用linux非常的懒, 已经习惯性的使用'TAB'来补全路径或者命令
但是使用TAB就会遇到一个问题, 就是如果你的输入的命令或者路径是错误的, 这个是后你按'TAB' 终端工具就会一直发出
'哔哔哔哔'的声音, 而我又是一个APM(手速, 玩过RTS类游戏的人都知道)比较多的, 所以经常在使用shell的时候关掉了声音
最近终于找到了解决方法.&lt;/p&gt;
&lt;p&gt;一般Linux都适用, Mac OS 有待测试&lt;/p&gt;
&lt;h3&gt;解决&lt;/h3&gt;
&lt;h4&gt;.bashrc&lt;/h4&gt;
&lt;p&gt;如果知道这个文件的作用的同学应该都懂, 在这个里面需要添加一行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;vim &lt;span class="nv"&gt;$HOME&lt;/span&gt;/.bashrc
&lt;span class="c"&gt;# 添加&lt;/span&gt;
&lt;span class="nv"&gt;INPUTRC&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;HOME&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/.inputrc  
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;.inputrc&lt;/h4&gt;
&lt;p&gt;再来说说这个文件, inputrc是用来做键盘按键映射的, 通过这个文件可以制作自己喜欢的 key-binding
关于 key-binding这个问题, 感兴趣的可以自己搜索, 因为一般很少用得上, 我们这里用上的是&lt;code&gt;bell-style&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;之前已经在&lt;code&gt;bashrc&lt;/code&gt;中添加了inputrc的环境变量, 接下来只需要在inputrc中添加&lt;code&gt;set bell-style none&lt;/code&gt;就可以关掉声音了&lt;/p&gt;
&lt;p&gt;最后只需要重新连接终端, 世界就安静了!~&lt;/p&gt;
&lt;p&gt;bell-style的可取值是: &lt;strong&gt;none&lt;/strong&gt;, &lt;strong&gt;visible&lt;/strong&gt;, &lt;strong&gt;audible&lt;/strong&gt;, 每个值的意义感兴趣可以深入研究一下.&lt;/p&gt;</summary><category term="linxu个性化"></category></entry><entry><title>multiprocessing 深度分析</title><link href="/articles/multiprocessing-shen-du-fen-xi.html" rel="alternate"></link><updated>2014-12-19T16:52:53+08:00</updated><author><name>coyote</name></author><id>tag:,2014-12-19:articles/multiprocessing-shen-du-fen-xi.html</id><summary type="html">&lt;p&gt;&lt;a href="http://pymotw.com/2/multiprocessing/basics.html"&gt;原文&lt;/a&gt;
Coyote翻译整理&lt;/p&gt;
&lt;h2&gt;正文&lt;/h2&gt;
&lt;h3&gt;multiprocessing 基本用法&lt;/h3&gt;
&lt;p&gt;最简单的在一个进程中启动多个进程的方法就是创建一个Process对象指定一个目标进程
然后调用start()方法启动.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;multiprocessing&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;worker function&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Worker&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;jobs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;multiprocessing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;jobs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;执行代码, print出5个 &lt;code&gt;Worker&lt;/code&gt;, 但是从这里是看不出他们的执行顺序的&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python multiprocessing_simple.py

Worker
Worker
Worker
Worker
Worker
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;但是很多时候我们使用进程是需要传递一些参数来使进程能够正常工作的. 
与&lt;code&gt;threading&lt;/code&gt;不同, 给&lt;code&gt;multiprocessing&lt;/code&gt;的&lt;code&gt;Process&lt;/code&gt;传递参数必须是能够用&lt;code&gt;pickle&lt;/code&gt;序列化的.
下面这个例子也许能看出些有趣的东西&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;multiprocessing&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;thread worker function&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Worker:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;jobs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;multiprocessing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,))&lt;/span&gt;
        &lt;span class="n"&gt;jobs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;每个进程都print了传递的整形参数&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python multiprocessing_simpleargs.py

Worker: 0
Worker: 1
Worker: 2
Worker: 3
Worker: 4
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;import目标功能(importable target function)&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;threading&lt;/code&gt;和&lt;code&gt;mutilprocessing&lt;/code&gt;的一个不同就是&lt;code&gt;multiprocessing&lt;/code&gt;可以在&lt;code&gt;__main__&lt;/code&gt;的命名空间中执行.
如果使用这种新颖的方法来启动的话, 则子进程的功能需要从别的地方来import需要执行的功能. 
封装在&lt;code&gt;__main__&lt;/code&gt;的核心代码部分如果在子进程运行,并不确定是否能够递归地运行在每个子进程的。
另一种方法是,从一个单独的脚本导入目标函数。&lt;/p&gt;
&lt;p&gt;比如下面这个例子:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;multiprocessing&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;multiprocessing_import_worker&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;jobs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;multiprocessing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;multiprocessing_import_worker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;jobs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里使用的核心代码在其他的模块中定义的:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;worker function&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="nx"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Worker&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;执行结果和第一个例子的结果相同&lt;/p&gt;
&lt;h3&gt;确定当前进程(Determining the Current Process)&lt;/h3&gt;
&lt;p&gt;单独传递一个参数给一个进程命名是不合理, 没必要的. 其实每个&lt;code&gt;Process&lt;/code&gt;实例都有一个默认的名字, 而且这个名字在进程创建的时候是可以进行修改的. 给一个进程命名还是非常有用的, 可以很容易的找到你需要的进程, 尤其是在同时启动多个进程的时候.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;multiprocessing&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;multiprocessing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current_process&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Starting&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Exiting&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;my_service&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;multiprocessing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current_process&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Starting&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Exiting&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;service&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;multiprocessing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;my_service&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;my_service&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;worker_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;multiprocessing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;worker 1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;worker_2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;multiprocessing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# use default name&lt;/span&gt;

    &lt;span class="n"&gt;worker_1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;worker_2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;调试信息中每一行都输出了该进程的进程名称, 在进程名的输出那一列里面&lt;code&gt;Process-3&lt;/code&gt;使用的是默认的进程名称, 虽然没有定义但是还是和&lt;code&gt;worker_1&lt;/code&gt;一样有进程名称.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python multiprocessing_names.py

worker &lt;span class="m"&gt;1&lt;/span&gt; Starting
worker &lt;span class="m"&gt;1&lt;/span&gt; Exiting
Process-3 Starting
Process-3 Exiting
my_service Starting
my_service Exiting1
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;守护进程(Daemon Processes)&lt;/h3&gt;
&lt;p&gt;默认情况下子进程未退出的时候主进程是不会退出的. 但是很多时候我们需要在后台运行一个非阻塞模式的进程.
比如创建一个服务的时候就不能轻易的被其他进程打断, 或者在运行过程中业务中断但是数据不能丢失或者腐化(比如:给一个给服务端发送"心跳"的任务)&lt;/p&gt;
&lt;p&gt;为了给一个进程标记成守护进程, 需要给&lt;code&gt;daemon&lt;/code&gt;属性赋值为&lt;code&gt;True&lt;/code&gt;或者&lt;code&gt;False&lt;/code&gt;. 默认的创建进程的时候是非守护进程状态.所以修改&lt;code&gt;daemon&lt;/code&gt;属性的值为&lt;code&gt;True&lt;/code&gt;来开启守护进程模式.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;multiprocessing&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;daemon&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;multiprocessing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current_process&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Starting:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;
    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Exiting :&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;
    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;non_daemon&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;multiprocessing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current_process&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Starting:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;
    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Exiting :&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;
    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;multiprocessing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;daemon&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;daemon&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;daemon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

    &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;multiprocessing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;non-daemon&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;non_daemon&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;daemon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

    &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;输出结果中没有包含守护进程print的&lt;code&gt;Exiting&lt;/code&gt;消息. 从所有的非守护进程(包括主进程)退出之前开始计时, deamon进程sleep 2秒之后被唤醒.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python multiprocessing_daemon.py

Starting: daemon 13866
Starting: non-daemon 13867
Exiting : non-daemon 13867
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;守护进程应该在主进程退出之前自动退出, 否则会造成主进程退出, 守护进程一直运行. 你可以通过使用 &lt;code&gt;ps&lt;/code&gt;命令来查看进程id 来确认那些程序是否都正常的运行.&lt;/p&gt;
&lt;h2&gt;等待进程结束(Waiting for Process)&lt;/h2&gt;
&lt;p&gt;使用 &lt;code&gt;join()&lt;/code&gt; 方法来等待进程运行结束&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;multiprocessing&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;daemon&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Starting:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;multiprocessing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current_process&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Exiting :&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;multiprocessing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current_process&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;non_daemon&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Starting:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;multiprocessing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current_process&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Exiting :&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;multiprocessing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current_process&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;multiprocessing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;daemon&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;daemon&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;daemon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

    &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;multiprocessing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;non-daemon&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;non_daemon&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;daemon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

    &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;执行了&lt;code&gt;join()&lt;/code&gt; 方法之后, 主进程会等到守护进程运行结束再退出, 这次可以看到显示守护进程print的&lt;code&gt;Exiting&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python multiprocessing_daemon_join.py

Starting: non-daemon
Exiting : non-daemon
Starting: daemon
Exiting : daemon
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;默认情况下, &lt;code&gt;join()&lt;/code&gt;等待的时间是不定的. 所以可以给它传递一个超时时间的参数(可以直接传递一个表示等待多少秒的浮点型数字来启动超时时间). 如果子进程在超时时间内没有完成工作, 则直接退出.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;multiprocessing&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;daemon&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Starting:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;multiprocessing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current_process&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Exiting :&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;multiprocessing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current_process&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;non_daemon&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Starting:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;multiprocessing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current_process&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Exiting :&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;multiprocessing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current_process&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;multiprocessing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;daemon&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;daemon&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;daemon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

    &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;multiprocessing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;non-daemon&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;non_daemon&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;daemon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

    &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;d.is_alive()&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_alive&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果daemon程序内部的运行时间超出了设置的超时时间, 在&lt;code&gt;join()&lt;/code&gt;之后程序会一直保持"alive"状态.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python multiprocessing_daemon_join_timeout.py

Starting: non-daemon
Exiting : non-daemon
d.is_alive&lt;span class="o"&gt;()&lt;/span&gt; True
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;结束进程(Terminating Processes)&lt;/h2&gt;
&lt;p&gt;虽然正常情况下应该通过&lt;code&gt;signal&lt;/code&gt;来结束进程, 如果一个进程挂起或者进入死锁状态, 就需要强制来杀死进程了. 调用进程对象的 &lt;code&gt;terminate()&lt;/code&gt; 方法来结束所有的子进程.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;multiprocessing&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;slow_worker&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Starting worker&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Finished worker&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;multiprocessing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;slow_worker&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;BEFORE:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_alive&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;DURING:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_alive&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;terminate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;TERMINATED:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_alive&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;JOINED:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_alive&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt; 在结束进程之后需要调用&lt;code&gt;join()&lt;/code&gt; 给后台一些反应时间来使进程结束, 而不是立即结束进程.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python multiprocessing_terminate.py

BEFORE: &amp;lt;Process&lt;span class="o"&gt;(&lt;/span&gt;Process-1, initial&lt;span class="o"&gt;)&lt;/span&gt;&amp;gt; False
DURING: &amp;lt;Process&lt;span class="o"&gt;(&lt;/span&gt;Process-1, started&lt;span class="o"&gt;)&lt;/span&gt;&amp;gt; True
TERMINATED: &amp;lt;Process&lt;span class="o"&gt;(&lt;/span&gt;Process-1, started&lt;span class="o"&gt;)&lt;/span&gt;&amp;gt; True
JOINED: &amp;lt;Process&lt;span class="o"&gt;(&lt;/span&gt;Process-1, stopped&lt;span class="o"&gt;[&lt;/span&gt;SIGTERM&lt;span class="o"&gt;])&lt;/span&gt;&amp;gt; False
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;进程退出状态(Process Exit Status)&lt;/h2&gt;
&lt;p&gt;可以通过&lt;code&gt;exitcode&lt;/code&gt; 来获取进程退出的退出状态
- &lt;code&gt;==0&lt;/code&gt; 正常退出
- &lt;code&gt;&amp;gt; 0&lt;/code&gt; 进程报错, 并且以该exitcode退出
- &lt;code&gt;&amp;lt; 0&lt;/code&gt; 进程被使用结束信号杀掉, 该结束信号是 &lt;code&gt;-1 * exitcode&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;multiprocessing&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;exit_error&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;exit_ok&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;return_value&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;raises&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;RuntimeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;There was an error!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;terminated&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;jobs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;exit_error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exit_ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;return_value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;raises&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;terminated&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Starting process for&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_name&lt;/span&gt;
        &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;multiprocessing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;jobs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;terminate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;.exitcode = &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exitcode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;进程抛出异常自动获取到&lt;code&gt;exitcode&lt;/code&gt;为1&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python multiprocessing_exitcode.py

Starting process &lt;span class="k"&gt;for&lt;/span&gt; exit_error
Starting process &lt;span class="k"&gt;for&lt;/span&gt; exit_ok
Starting process &lt;span class="k"&gt;for&lt;/span&gt; return_value
Starting process &lt;span class="k"&gt;for&lt;/span&gt; raises
Starting process &lt;span class="k"&gt;for&lt;/span&gt; terminated
Process raises:
Traceback &lt;span class="o"&gt;(&lt;/span&gt;most recent call last&lt;span class="o"&gt;)&lt;/span&gt;:
  File &lt;span class="s2"&gt;&amp;quot;/Library/Frameworks/Python.framework/Versions/2.7/lib/python&lt;/span&gt;
&lt;span class="s2"&gt;2.7/multiprocessing/process.py&amp;quot;&lt;/span&gt;, line 258, in _bootstrap
    self.run&lt;span class="o"&gt;()&lt;/span&gt;
  File &lt;span class="s2"&gt;&amp;quot;/Library/Frameworks/Python.framework/Versions/2.7/lib/python&lt;/span&gt;
&lt;span class="s2"&gt;2.7/multiprocessing/process.py&amp;quot;&lt;/span&gt;, line 114, in run
    self._target&lt;span class="o"&gt;(&lt;/span&gt;*self._args, **self._kwargs&lt;span class="o"&gt;)&lt;/span&gt;
  File &lt;span class="s2"&gt;&amp;quot;multiprocessing_exitcode.py&amp;quot;&lt;/span&gt;, line 24, in raises
    raise RuntimeError&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;There was an error!&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
RuntimeError: There was an error!
exit_error.exitcode &lt;span class="o"&gt;=&lt;/span&gt; 1
exit_ok.exitcode &lt;span class="o"&gt;=&lt;/span&gt; 0
return_value.exitcode &lt;span class="o"&gt;=&lt;/span&gt; 0
raises.exitcode &lt;span class="o"&gt;=&lt;/span&gt; 1
terminated.exitcode &lt;span class="o"&gt;=&lt;/span&gt; -15
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;子类进程(Subclassing Process)&lt;/h2&gt;
&lt;p&gt;最简单的方法启动一个进程就是使用target的方法来启动一个&lt;code&gt;Process&lt;/code&gt;, 但是也可以通过子类的方式自定义进程子类.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;multiprocessing&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Worker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;multiprocessing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;In &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;jobs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Worker&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;jobs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;继承出的子类, 应该重写&lt;code&gt;run()&lt;/code&gt;方法来工作&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python multiprocessing_subclass.py

In Worker-1
In Worker-2
In Worker-3
In Worker-4
In Worker-5
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;PS&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://pymotw.com/2/multiprocessing/basics.html"&gt;原文链接&lt;/a&gt;
由&lt;strong&gt;@Coyote&lt;/strong&gt;翻译, 转载需注明原文和翻译者&lt;/p&gt;</summary><category term="python"></category><category term="multiprocessing"></category></entry><entry><title>multiprocessing学习笔记</title><link href="/articles/multiprocessingxue-xi-bi-ji.html" rel="alternate"></link><updated>2014-12-19T16:52:53+08:00</updated><author><name>coyote</name></author><id>tag:,2014-12-19:articles/multiprocessingxue-xi-bi-ji.html</id><summary type="html">&lt;h2&gt;multiprocessing&lt;/h2&gt;
&lt;p&gt;multiprocessing是Python 标准库中的多进程库, 由于Python不建议使用线程,所以尽可能的减少使用线程,如果需要建议使用 第三方库 futures来创建线程.&lt;/p&gt;
&lt;h3&gt;使用并发进程的好处&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;进程并发&lt;/li&gt;
&lt;li&gt;充分利用多核优势&lt;/li&gt;
&lt;li&gt;方便管理,可以接收Linux中的kill信号,根据信号进行安全退出&lt;ul&gt;
&lt;li&gt;之前使用一个python脚本,启动另一个进程的时候,如果想要完全脱离父进程,需要fork..fork..非常复杂&lt;/li&gt;
&lt;li&gt;通过multiprocessing创建的进程很容易就进行各种管理.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;multiprocessing创建并发进程&lt;/h3&gt;
&lt;h4&gt;创建简单并发进程&lt;/h4&gt;
&lt;p&gt;这种方式适用于那种单个功能,并且逻辑不复杂的进程&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;multiprocessing&lt;/span&gt; 
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
    &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;p1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;multiprocessing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="n"&gt;p2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;multiprocessing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;p1 pid is &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;p2 pid is &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;PS: 代码完全是为了实例实际谁计算会用并发进程&lt;/p&gt;
&lt;h3&gt;并发进程加队列实现进程通讯&lt;/h3&gt;
&lt;p&gt;这种方式可以使同一件事情拆分给多个进程去做,然后将结果返回到一个队列当中其他进程可以读取&lt;/p&gt;
&lt;p&gt;这种方式可以应用到大量网络扫描时单进程扫描效率低的情况&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# 这段代码米有测试过....直接写的...&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;multiprocessing&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;scan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iplist&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c"&gt;#  此处应为核心的扫描代码&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;ip&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;lplist&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;scanning &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;ip&lt;/span&gt;
        &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;do_some_scan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ip&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_res&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;iplist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;192.168.0.1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;192.168.0.2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;192.168.0.3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;192.168.0.4&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;......&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c"&gt;# 这里可以自己处理&lt;/span&gt;
    &lt;span class="n"&gt;proc_num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iplist&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;  &lt;span class="c"&gt;# 假设ip 有50个一个进程扫10个,创建5个进程&lt;/span&gt;
    &lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;multiprocessing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Queue&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;proc_num&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;p1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;multiprocessing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;scan&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iplist&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;),);&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
        &lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;q1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;multiprocessing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;get_res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;),);&lt;/span&gt;
    &lt;span class="n"&gt;q1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;通过继承Process类来定义进程&lt;/h3&gt;
&lt;p&gt;这种高级使用方法可以更加对象化的来定义一个Process对象,将一个Class作为一个进程类来使用&lt;/p&gt;
&lt;p&gt;更好的是可以在里面定义一些接收信号退出的方法来优雅的退出进程.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;multiprocessing&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;signal&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Master&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;multiprocessing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c"&gt;# 在这个方法里面可以初始化一些变量&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Master&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;needstop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="c"&gt;# 也可以对信号处理进行绑定&lt;/span&gt;
        &lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIGTERM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;handler_sigterm&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# 处理终止信号&lt;/span&gt;
        &lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIGQUIT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;handler_sigquit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# 处理退出信号&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handler_sigterm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;needstop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handler_sigquit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c"&gt;# do someting&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;needstop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

    &lt;span class="c"&gt;# 这个方法就是写核心功能的地方&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;needstop&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="c"&gt;# do someting&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;im working&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;master&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Master&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;PS: 这里&lt;code&gt;run()&lt;/code&gt;用到了while循环,突然想起之前遇到的一个问题,希望贴出来可以让大家借鉴&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;.....&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;continue&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;.....&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;源代码记不清了,但是这个代码存在的问题就是其中第一个continue是没有sleep的,如果a到某一个时刻一直大于零,则会进入无挂起的死循环,CPU会被占满,这样就是无意间写出了一个bug, 示例代码可能比较短,不容易发现,如果代码比较长就会不容易发现这个bug,所以最好的方法就是,如果对于时间精度没有严格要求的代码的话,建议进入while循环先sleep, 这样避免了无意的资源浪费的.&lt;/p&gt;</summary><category term="python"></category><category term="multiprocessing"></category></entry><entry><title>ZeroMQ学习笔记（一）</title><link href="/articles/zeromqxue-xi-bi-ji-yi.html" rel="alternate"></link><updated>2014-12-18T11:00:07+08:00</updated><author><name>coyote</name></author><id>tag:,2014-12-18:articles/zeromqxue-xi-bi-ji-yi.html</id><summary type="html">&lt;h2&gt;啥是ZMQ&lt;/h2&gt;
&lt;p&gt;官方如是说&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ZMQ (以下 ZeroMQ 简称 ZMQ)是一个简单好用的传输层，像框架一样的一个 socket library，他使得 Socket 编程更加简单、简洁和性能更高。是一个消息处理队列库，可在多个线程、内核和主机盒之间弹性伸缩。ZMQ 的明确目标是“成为标准网络协议栈的一部分，之后进入 Linux 内核”。现在还未看到它们的成功。但是，它无疑是极具前景的、并且是人们更加需要的“传统”BSD 套接字之上的一层封装。ZMQ 让编写高性能网络应用程序极为简单和有趣。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;传统的socket都是一问一答的模式，就是所谓的端到端通讯，A给B发送了一个消息，B回给A一个消息。&lt;/p&gt;
&lt;p&gt;而ZMQ则定义了多种的通讯方式，既可以同步，也可以异步，比如原来的socket在ZMQ中被定义成“问答模式”&lt;/p&gt;
&lt;h2&gt;为啥用ZMQ&lt;/h2&gt;
&lt;h3&gt;无图无真相&lt;/h3&gt;
&lt;p&gt;&lt;img alt="复杂的通讯" src="https://github.com/imatix/zguide/raw/master/images/fig8.png" /&gt;&lt;/p&gt;
&lt;p&gt;请问传统socket怎么破 ?&lt;/p&gt;
&lt;h3&gt;哪来的这个需求&lt;/h3&gt;
&lt;p&gt;在一个复杂的系统当中，数据是以数据流的方式来进行处理的，也就是说一个原始数据经过一条流水线之后成为用户真正想要得到的数据，同时过程中这些数据还要被其他的功能所引用。&lt;/p&gt;
&lt;p&gt;例如：
某网络扫描工具，我们只能提供一个域名&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一个处理这个域名的进程将这个域名映射成为&lt;code&gt;{"ip": "192.168.1.1", "domain": "www.example.com"}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;第二个进程根据根据第一个进程结果的ip进行c段扫描，这个时候数据成了&lt;code&gt;{"ip":["192.168.1.1","192.168.1.2",....],"domain":"www.example.com"}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;第三个进程根据第二个结果中的域名（domain）进行子域名探测，这个时候数据成了&lt;code&gt;{"ip":["192.168.1.1","192.168.1.2",....],"domain":["www.example.com","blog.example.com","news.exapmle.com",......]}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;第四个.....第五个......&lt;/li&gt;
&lt;li&gt;最后我们把输入的单个域名经过一系列的扫描探测等等，返回一个存在漏洞的URL地址和漏洞类型&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当然这个工具只是一个想法，没有实现，也不知道实现的价值，但是我们的项目一些单个进程的工具是有的，就是没有整合成为一个综合的工具
&lt;a href="https://github.com/kttzd/informap"&gt;传送门:InfoMap&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;ZMQ官方文档&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://zguide.zeromq.org/py:all"&gt;官文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本文所有用的图片全部都来自官文&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这里分享的是一些学习心得，没有大段代码。&lt;/p&gt;
&lt;h2&gt;学习笔记之ZMQ通讯模型&lt;/h2&gt;
&lt;h3&gt;问答模式（REQ-REP）&lt;/h3&gt;
&lt;p&gt;&lt;img alt="req-rep" src="https://github.com/imatix/zguide/raw/master/images/fig2.png" /&gt;
这个模式和传统Socket差不多，是阻塞状态的，客户端sand服务端recv，这个很简单没啥可说的。
学习过程中我尝试启动一个服务端，多个客户端进行发送消息，服务端在这个模式只能是单条处理，如果同时发送按照消息发送到的时间先后进行处理的，在没处理之前，所有的进程都处于阻塞状态。
&lt;strong&gt;实例代码太多了，我就不往这里搬了&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;发布订阅模式（PUB-SUB）&lt;/h3&gt;
&lt;p&gt;&lt;img alt="pub-sub" src="https://github.com/imatix/zguide/raw/master/images/fig4.png" /&gt;
这个可以称为ZMQ的经典模型了，是Socket不容易做到的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先PUB的进程建立一个socket的通讯文件描述符 可以是ip加端口的形式&lt;code&gt;tcp://127.0.0.1:1234&lt;/code&gt;也可以是IPC格式&lt;code&gt;ipc:///tmp/pub.ipc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;然后SUB进程进行connect到PUB创建的通讯文件描述符，如果PUB进程有消息发送，所有的SUB进程将能够全部收到相当于广播。不能够指定PUB给某一个进程而其他进程收不到。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;the subscriber will always miss the first messages that the publisher sends.&lt;/strong&gt; 非常重要的一点是当PUB进程在建立连接的过程中已经在发布消息，那么SUB将会错过十几到几十条消息不等（自己测试，非官方），所以如果在通讯过程中最好能够定下SUB进程的数量，尽量避免动态SUB或者短链接的方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;后续还会继续填补&lt;/h3&gt;
&lt;p&gt;to be continue......;-)&lt;/p&gt;</summary><category term="python"></category><category term="zeromq"></category></entry><entry><title>用Pelican搭建自己的博客（二）发布博客</title><link href="/articles/yong-pelicanda-jian-zi-ji-de-bo-ke-er-fa-bu-bo-ke.html" rel="alternate"></link><updated>2014-12-15T16:15:03+08:00</updated><author><name>coyote</name></author><id>tag:,2014-12-15:articles/yong-pelicanda-jian-zi-ji-de-bo-ke-er-fa-bu-bo-ke.html</id><summary type="html">&lt;p&gt;继续上一篇&lt;/p&gt;
&lt;h2&gt;本地发布&lt;/h2&gt;
&lt;p&gt;由于现在没有正式的在浏览器中访问过博客，所以我们需要现在本地测试成功之后再发布到正常使用的服务器上&lt;/p&gt;
&lt;h3&gt;第一篇博客&lt;/h3&gt;
&lt;p&gt;Pelican使用纯静态页面来发布文章, 创建好的目录下其实已经提供了很好的几个工具,我们先来看看都是干嘛的&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;.
├── output             
├── content            
├── Makefile           // 生成html的makefile文件
                       // 可以通过make html来将content中得内容发布到output
├── develop_server.sh  // 本地测试服务启动脚本
                       // 通过 ./develop_server.sh start 来生成html和启动本地web服务
├── fabfile.py         // fabric自动化任务工具
                       // 可以在这个文件里面定义一些方法来使用 fab 方法名来进行发布任务
                       // 如可以定义一个publish的方法执行本地命令 fab publish来发布文档
├── pelicanconf.py     
└── publishconf.py     
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;那么们先来写一篇文档,在content文件中创建&lt;code&gt;first.md&lt;/code&gt;并且写一些markdown的内容进去&lt;/p&gt;
&lt;p&gt;之后在content文件夹所在的目录使用 make html来生成静态界面,当生成之后,使用&lt;code&gt;ls ./output&lt;/code&gt;查看output目录下看到&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;.
├── archives.html
├── author
├── authors.html
├── categories.html
├── category
├── di-yi-pian-bo-ke.html
├── index.html
├── pages
├── sitemap.xml
├── tag
├── tags.html
└── theme
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;由一个空的目录变成了一个包含html和js+css的你柜台页面目录&lt;/p&gt;
&lt;p&gt;然后我们切换到output得目录中,使用Python自带的SimpleHTTPServer,来开启本地服务&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;python -m SimpleHTTPServer 80
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接着用浏览器访问&lt;code&gt;http://IP&lt;/code&gt; 就可以看到博客的样子啦;-)&lt;/p&gt;
&lt;h3&gt;To Be Continue&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;下一篇我们将介绍如何把本地服务配置成为web服务可以让博客可以被访问啦&lt;/strong&gt;&lt;/p&gt;</summary><category term="python"></category></entry><entry><title>用Pelican搭建自己的博客（一）环境的搭建</title><link href="/articles/yong-pelicanda-jian-zi-ji-de-bo-ke-yi-huan-jing-de-da-jian.html" rel="alternate"></link><updated>2014-12-15T16:15:03+08:00</updated><author><name>coyote</name></author><id>tag:,2014-12-15:articles/yong-pelicanda-jian-zi-ji-de-bo-ke-yi-huan-jing-de-da-jian.html</id><summary type="html">&lt;p&gt;作为一个A Pythoner want to be Pythonic想要搭建一个自己博客，之前想要采取使用Django-CMS来搭建看了很多其他人写的源码之后开始动手自己写，但是发现自己时间不够充足，导致经常跳票写好了后台，又要配置数据库，总不能完全照搬人家的博客源码过来吧。所以经过了Django-CMS写了4个版本后，博客的进度被搁置了，知道有一天查找资料发现博主&lt;a href="http://www.linuxzen.com/shi-yong-pelicanda-zao-jing-tai-bo-ke.html"&gt;cold's world&lt;/a&gt;的博客，深表感谢。重新燃起搭建的欲望，结果2天共计8小时完成搭建。所以记录下来分享一下。&lt;/p&gt;
&lt;p&gt;有任何疑问可以留言或者邮箱联系我。&lt;/p&gt;
&lt;h2&gt;环境&lt;/h2&gt;
&lt;h3&gt;硬件环境&lt;/h3&gt;
&lt;p&gt;Digitalocean 10刀服务器 Ubuntu 64位&lt;/p&gt;
&lt;p&gt;之前很多人推荐这个还有Linode，两家都是SSD的服务器
感觉对于普通个人用户Digitalocean的5刀或者10刀还不错。
Linode没用过也不好评价，但是最低配和Digitalocean价格差不多。
PS：另外还部署了Shadowsocks，目前就几个人用，如果需要的可以联系我 ;-)&lt;/p&gt;
&lt;h3&gt;软件环境&lt;/h3&gt;
&lt;h4&gt;Python&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;virtualenvwrapper&lt;/li&gt;
&lt;li&gt;Pelican&lt;/li&gt;
&lt;li&gt;MarkDown&lt;/li&gt;
&lt;li&gt;fabric&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Linux&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;bashshell&lt;/li&gt;
&lt;li&gt;crontab&lt;/li&gt;
&lt;li&gt;git&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;其他&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;disqus&lt;/li&gt;
&lt;li&gt;google analytics&lt;/li&gt;
&lt;li&gt;gumby&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;折腾&lt;/h2&gt;
&lt;p&gt;Python环境都是Ubuntu里面准备好的，所以不需要再自己安装，如果需要&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ apt-get install python&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;virtualenvwrapper&lt;/h3&gt;
&lt;p&gt;virtualenvwrapper来安装Python的虚拟环境，一开始我是使用virtualenv来建立，但是发现创建的环境可以随便放，这样环境多了不易于自己维护，后来发现了virtualenvwrapper&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# 如果有pip使用
$ pip install virtualenvwrapper

# 没有使用easy_install
$ easy_install virtualenvwrapper
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;安装完成后需要找到 &lt;code&gt;virtualenvwrapper.sh&lt;/code&gt;这个脚本，一般默认安装在
&lt;code&gt;/usr/bin/virtualenvwrapper.sh&lt;/code&gt;
如果没有找到尝试看看&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ls /usr/sbin/
&lt;span class="nv"&gt;$ &lt;/span&gt;ls /usr/local/bin/
&lt;span class="nv"&gt;$ &lt;/span&gt;ls /usr/local/sbin/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个根据系统的环境变量不同可能有所不同
找到之后用source 添加到当前终端环境中&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;source /your/path/virtualenvwrapper.sh
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;建议省去每次都需要自己添加的麻烦，把这个命令添加到&lt;code&gt;.bashrc&lt;/code&gt;中&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;vim /home/&lt;span class="o"&gt;(&lt;/span&gt;User&lt;span class="o"&gt;)&lt;/span&gt;/.bashrc
&lt;span class="c"&gt;# 如果是root用户&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;vim /root/.bashrc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后重新连接一个SSH终端，这个时候会出现两个新的命令&lt;code&gt;mkvirtualenv&lt;/code&gt;和&lt;code&gt;workon&lt;/code&gt;
这两个命令分别是创建一个Python虚拟环境，和切换到某个Python虚拟环境&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# 创建一个名为blog的python虚拟环境
$ mkvirtualenv blog

# 之后自动切换到虚拟环境中
(blog)$ 

# 退出虚拟环境
(blog)$ deactivate
$ 

# 使用workon进入或者切换环境
$ workon blog
(blog)$ 
(blog)$ workon other
(other)$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;安装Pelican&lt;/h3&gt;
&lt;p&gt;以下工作环境都要先切换到指定的虚拟环境中&lt;/p&gt;
&lt;h4&gt;使用github源码安装&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/getpelican/pelican.git
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;pelican
&lt;span class="nv"&gt;$ &lt;/span&gt;python setup.py install
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;前提是你在系统里面装过了git命令，有的系统默认是没有git这个命令的&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;apt-get install git
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;使用pip安装&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip install pelican markdown
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;markdown是用来生成博客文章的，如果没有装，后面生成静态博客的时候md的文件会不能解析，无法生成html&lt;/p&gt;
&lt;h3&gt;开始搭建pelican博客&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /your/path/blog/
&lt;span class="nv"&gt;$ &lt;/span&gt;pelican-quickstart
&amp;gt; Where &lt;span class="k"&gt;do&lt;/span&gt; you want to create your new web site? &lt;span class="o"&gt;[&lt;/span&gt;.&lt;span class="o"&gt;]&lt;/span&gt;   &lt;span class="c"&gt;# 生成在当前目录 &lt;/span&gt;
&amp;gt; What will be the title of this web site? title       &lt;span class="c"&gt;# 博客的标题&lt;/span&gt;
&amp;gt; Who will be the author of this web site? author      &lt;span class="c"&gt;# 博客的坐着&lt;/span&gt;
&amp;gt; What will be the default language of this web site? &lt;span class="o"&gt;[&lt;/span&gt;en&lt;span class="o"&gt;]&lt;/span&gt; zh &lt;span class="c"&gt;#网站的默认语言 zh表示中文&lt;/span&gt;
&amp;gt; Do you want to specify a URL prefix? e.g., http://example.com   &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; 
&amp;gt; What is your URL prefix? &lt;span class="o"&gt;(&lt;/span&gt;see above example&lt;span class="p"&gt;;&lt;/span&gt; no trailing slash&lt;span class="o"&gt;)&lt;/span&gt; www.example.com &lt;span class="c"&gt;# 输入自己的域名&lt;/span&gt;
&lt;span class="c"&gt;# 以下都默认就好，需要的话自己改&lt;/span&gt;
&amp;gt; Do you want to &lt;span class="nb"&gt;enable &lt;/span&gt;article pagination? &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; 
&amp;gt; How many articles per page &lt;span class="k"&gt;do&lt;/span&gt; you want? &lt;span class="o"&gt;[&lt;/span&gt;10&lt;span class="o"&gt;]&lt;/span&gt; 
&amp;gt; Do you want to generate a Fabfile/Makefile to automate generation and publishing? &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; 
&amp;gt; Do you want an auto-reload &lt;span class="p"&gt;&amp;amp;&lt;/span&gt; simpleHTTP script to assist with theme and site development? &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; 
&amp;gt; Do you want to upload your website using FTP? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; 
&amp;gt; Do you want to upload your website using SSH? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; 
&amp;gt; Do you want to upload your website using Dropbox? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; 
&amp;gt; Do you want to upload your website using S3? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; 
&amp;gt; Do you want to upload your website using Rackspace Cloud Files? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; 
&amp;gt; Do you want to upload your website using GitHub Pages? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后回答一系列问题之后，你的目录下会生成2个目录和4个文件&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;.
├── output             // 生成静态html的发布目录
├── content            // 发布文章的目录，存放md，rst文件
├── Makefile           // 生成html的makefile文件
├── develop_server.sh  // 本地测试服务启动脚本
├── fabfile.py         // fabric自动化任务工具
├── pelicanconf.py     // pelican的配置文件
└── publishconf.py     // make publish用的配置文件
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;至此博客的环境已经搭建完成，下一步就是测试发布博客和服务配置&lt;/p&gt;</summary><category term="python"></category></entry><entry><title>第一篇博客</title><link href="/articles/di-yi-pian-bo-ke.html" rel="alternate"></link><updated>2014-12-13T00:00:00+08:00</updated><author><name>coyote</name></author><id>tag:,2014-12-13:articles/di-yi-pian-bo-ke.html</id><summary type="html">&lt;p&gt;经过多次折腾终于完成部署了自己的博客&lt;/p&gt;
&lt;p&gt;这篇文章为了纪念第一次部署成功并且测试使用的文章&lt;/p&gt;
&lt;p&gt;测试markdown&lt;/p&gt;
&lt;h1&gt;h1&lt;/h1&gt;
&lt;h2&gt;h2&lt;/h2&gt;
&lt;h3&gt;h3&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;test&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Success&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="python"></category></entry></feed>