<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Coyote's Blog</title><link href="http://chencoyote.github.io/" rel="alternate"></link><link href="http://chencoyote.github.io/feeds/ji-zhu.atom.xml" rel="self"></link><id>http://chencoyote.github.io/</id><updated>2014-12-15T16:15:03+08:00</updated><entry><title>用Pelican搭建自己的博客（二）发布博客</title><link href="http://chencoyote.github.io/articles/yong-pelicanda-jian-zi-ji-de-bo-ke-er-fa-bu-bo-ke.html" rel="alternate"></link><updated>2014-12-15T16:15:03+08:00</updated><author><name>coyote</name></author><id>tag:chencoyote.github.io,2014-12-15:articles/yong-pelicanda-jian-zi-ji-de-bo-ke-er-fa-bu-bo-ke.html</id><summary type="html">&lt;p&gt;继续上一篇&lt;/p&gt;
&lt;h2&gt;本地发布&lt;/h2&gt;
&lt;p&gt;由于现在没有正式的在浏览器中访问过博客，所以我们需要现在本地测试成功之后再发布到正常使用的服务器上&lt;/p&gt;
&lt;h3&gt;第一篇博客&lt;/h3&gt;
&lt;p&gt;Pelican使用纯静态页面来发布文章, 创建好的目录下其实已经提供了很好的几个工具,我们先来看看都是干嘛的&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;.
├── output             
├── content            
├── Makefile           // 生成html的makefile文件
                       // 可以通过make html来将content中得内容发布到output
├── develop_server.sh  // 本地测试服务启动脚本
                       // 通过 ./develop_server.sh start 来生成html和启动本地web服务
├── fabfile.py         // fabric自动化任务工具
                       // 可以在这个文件里面定义一些方法来使用 fab 方法名来进行发布任务
                       // 如可以定义一个publish的方法执行本地命令 fab publish来发布文档
├── pelicanconf.py     
└── publishconf.py     
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;那么们先来写一篇文档,在content文件中创建&lt;code&gt;first.md&lt;/code&gt;并且写一些markdown的内容进去&lt;/p&gt;
&lt;p&gt;之后在content文件夹所在的目录使用 make html来生成静态界面,当生成之后,使用&lt;code&gt;ls ./output&lt;/code&gt;查看output目录下看到&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;.
├── archives.html
├── author
├── authors.html
├── categories.html
├── category
├── di-yi-pian-bo-ke.html
├── index.html
├── pages
├── sitemap.xml
├── tag
├── tags.html
└── theme
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;由一个空的目录变成了一个包含html和js+css的你柜台页面目录&lt;/p&gt;
&lt;p&gt;然后我们切换到output得目录中,使用Python自带的SimpleHTTPServer,来开启本地服务&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;python -m SimpleHTTPServer 80
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接着用浏览器访问&lt;code&gt;http://IP&lt;/code&gt; 就可以看到博客的样子啦;-)&lt;/p&gt;
&lt;h3&gt;To Be Continue&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;下一篇我们将介绍如何把本地服务配置成为web服务可以让博客可以被访问啦&lt;/strong&gt;&lt;/p&gt;</summary><category term="python"></category></entry><entry><title>用Pelican搭建自己的博客（一）环境的搭建</title><link href="http://chencoyote.github.io/articles/yong-pelicanda-jian-zi-ji-de-bo-ke-yi-huan-jing-de-da-jian.html" rel="alternate"></link><updated>2014-12-15T16:15:03+08:00</updated><author><name>coyote</name></author><id>tag:chencoyote.github.io,2014-12-15:articles/yong-pelicanda-jian-zi-ji-de-bo-ke-yi-huan-jing-de-da-jian.html</id><summary type="html">&lt;p&gt;作为一个A Pythoner want to be Pythonic想要搭建一个自己博客，之前想要采取使用Django-CMS来搭建看了很多其他人写的源码之后开始动手自己写，但是发现自己时间不够充足，导致经常跳票写好了后台，又要配置数据库，总不能完全照搬人家的博客源码过来吧。所以经过了Django-CMS写了4个版本后，博客的进度被搁置了，知道有一天查找资料发现博主&lt;a href="http://www.linuxzen.com/shi-yong-pelicanda-zao-jing-tai-bo-ke.html"&gt;cold's world&lt;/a&gt;的博客，深表感谢。重新燃起搭建的欲望，结果2天共计8小时完成搭建。所以记录下来分享一下。&lt;/p&gt;
&lt;p&gt;有任何疑问可以留言或者邮箱联系我。&lt;/p&gt;
&lt;h2&gt;环境&lt;/h2&gt;
&lt;h3&gt;硬件环境&lt;/h3&gt;
&lt;p&gt;Digitalocean 10刀服务器 Ubuntu 64位&lt;/p&gt;
&lt;p&gt;之前很多人推荐这个还有Linode，两家都是SSD的服务器
感觉对于普通个人用户Digitalocean的5刀或者10刀还不错。
Linode没用过也不好评价，但是最低配和Digitalocean价格差不多。
PS：另外还部署了Shadowsocks，目前就几个人用，如果需要的可以联系我 ;-)&lt;/p&gt;
&lt;h3&gt;软件环境&lt;/h3&gt;
&lt;h4&gt;Python&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;virtualenvwrapper&lt;/li&gt;
&lt;li&gt;Pelican&lt;/li&gt;
&lt;li&gt;MarkDown&lt;/li&gt;
&lt;li&gt;fabric&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Linux&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;bashshell&lt;/li&gt;
&lt;li&gt;crontab&lt;/li&gt;
&lt;li&gt;git&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;其他&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;disqus&lt;/li&gt;
&lt;li&gt;google analytics&lt;/li&gt;
&lt;li&gt;gumby&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;折腾&lt;/h2&gt;
&lt;p&gt;Python环境都是Ubuntu里面准备好的，所以不需要再自己安装，如果需要&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ apt-get install python&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;virtualenvwrapper&lt;/h3&gt;
&lt;p&gt;virtualenvwrapper来安装Python的虚拟环境，一开始我是使用virtualenv来建立，但是发现创建的环境可以随便放，这样环境多了不易于自己维护，后来发现了virtualenvwrapper&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# 如果有pip使用
$ pip install virtualenvwrapper

# 没有使用easy_install
$ easy_install virtualenvwrapper
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;安装完成后需要找到 &lt;code&gt;virtualenvwrapper.sh&lt;/code&gt;这个脚本，一般默认安装在
&lt;code&gt;/usr/bin/virtualenvwrapper.sh&lt;/code&gt;
如果没有找到尝试看看&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ls /usr/sbin/
&lt;span class="nv"&gt;$ &lt;/span&gt;ls /usr/local/bin/
&lt;span class="nv"&gt;$ &lt;/span&gt;ls /usr/local/sbin/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个根据系统的环境变量不同可能有所不同
找到之后用source 添加到当前终端环境中&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;source /your/path/virtualenvwrapper.sh
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;建议省去每次都需要自己添加的麻烦，把这个命令添加到&lt;code&gt;.bashrc&lt;/code&gt;中&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;vim /home/&lt;span class="o"&gt;(&lt;/span&gt;User&lt;span class="o"&gt;)&lt;/span&gt;/.bashrc
&lt;span class="c"&gt;# 如果是root用户&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;vim /root/.bashrc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后重新连接一个SSH终端，这个时候会出现两个新的命令&lt;code&gt;mkvirtualenv&lt;/code&gt;和&lt;code&gt;workon&lt;/code&gt;
这两个命令分别是创建一个Python虚拟环境，和切换到某个Python虚拟环境&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# 创建一个名为blog的python虚拟环境
$ mkvirtualenv blog

# 之后自动切换到虚拟环境中
(blog)$ 

# 退出虚拟环境
(blog)$ deactivate
$ 

# 使用workon进入或者切换环境
$ workon blog
(blog)$ 
(blog)$ workon other
(other)$ 
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;安装Pelican&lt;/h3&gt;
&lt;p&gt;以下工作环境都要先切换到指定的虚拟环境中&lt;/p&gt;
&lt;h4&gt;使用github源码安装&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/getpelican/pelican.git
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;pelican
&lt;span class="nv"&gt;$ &lt;/span&gt;python setup.py install
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;前提是你在系统里面装过了git命令，有的系统默认是没有git这个命令的&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;apt-get install git
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;使用pip安装&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip install pelican markdown
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;markdown是用来生成博客文章的，如果没有装，后面生成静态博客的时候md的文件会不能解析，无法生成html&lt;/p&gt;
&lt;h3&gt;开始搭建pelican博客&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /your/path/blog/
&lt;span class="nv"&gt;$ &lt;/span&gt;pelican-quickstart
&amp;gt; Where &lt;span class="k"&gt;do&lt;/span&gt; you want to create your new web site? &lt;span class="o"&gt;[&lt;/span&gt;.&lt;span class="o"&gt;]&lt;/span&gt;   &lt;span class="c"&gt;# 生成在当前目录 &lt;/span&gt;
&amp;gt; What will be the title of this web site? title       &lt;span class="c"&gt;# 博客的标题&lt;/span&gt;
&amp;gt; Who will be the author of this web site? author      &lt;span class="c"&gt;# 博客的坐着&lt;/span&gt;
&amp;gt; What will be the default language of this web site? &lt;span class="o"&gt;[&lt;/span&gt;en&lt;span class="o"&gt;]&lt;/span&gt; zh &lt;span class="c"&gt;#网站的默认语言 zh表示中文&lt;/span&gt;
&amp;gt; Do you want to specify a URL prefix? e.g., http://example.com   &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; 
&amp;gt; What is your URL prefix? &lt;span class="o"&gt;(&lt;/span&gt;see above example&lt;span class="p"&gt;;&lt;/span&gt; no trailing slash&lt;span class="o"&gt;)&lt;/span&gt; www.example.com &lt;span class="c"&gt;# 输入自己的域名&lt;/span&gt;
&lt;span class="c"&gt;# 以下都默认就好，需要的话自己改&lt;/span&gt;
&amp;gt; Do you want to &lt;span class="nb"&gt;enable &lt;/span&gt;article pagination? &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; 
&amp;gt; How many articles per page &lt;span class="k"&gt;do&lt;/span&gt; you want? &lt;span class="o"&gt;[&lt;/span&gt;10&lt;span class="o"&gt;]&lt;/span&gt; 
&amp;gt; Do you want to generate a Fabfile/Makefile to automate generation and publishing? &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; 
&amp;gt; Do you want an auto-reload &lt;span class="p"&gt;&amp;amp;&lt;/span&gt; simpleHTTP script to assist with theme and site development? &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; 
&amp;gt; Do you want to upload your website using FTP? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; 
&amp;gt; Do you want to upload your website using SSH? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; 
&amp;gt; Do you want to upload your website using Dropbox? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; 
&amp;gt; Do you want to upload your website using S3? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; 
&amp;gt; Do you want to upload your website using Rackspace Cloud Files? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; 
&amp;gt; Do you want to upload your website using GitHub Pages? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后回答一系列问题之后，你的目录下会生成2个目录和4个文件&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;.
├── output             // 生成静态html的发布目录
├── content            // 发布文章的目录，存放md，rst文件
├── Makefile           // 生成html的makefile文件
├── develop_server.sh  // 本地测试服务启动脚本
├── fabfile.py         // fabric自动化任务工具
├── pelicanconf.py     // pelican的配置文件
└── publishconf.py     // make publish用的配置文件
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;至此博客的环境已经搭建完成，下一步就是测试发布博客和服务配置&lt;/p&gt;</summary><category term="python"></category></entry></feed>